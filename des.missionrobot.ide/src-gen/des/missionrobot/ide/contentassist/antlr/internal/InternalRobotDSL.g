/*
 * generated by Xtext 2.10.0
 */
grammar InternalRobotDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package des.missionrobot.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package des.missionrobot.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import des.missionrobot.services.RobotDSLGrammarAccess;

}
@parser::members {
	private RobotDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(RobotDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMission
entryRuleMission
:
{ before(grammarAccess.getMissionRule()); }
	 ruleMission
{ after(grammarAccess.getMissionRule()); } 
	 EOF 
;

// Rule Mission
ruleMission 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMissionAccess().getGroup()); }
		(rule__Mission__Group__0)
		{ after(grammarAccess.getMissionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBehaviour
entryRuleBehaviour
:
{ before(grammarAccess.getBehaviourRule()); }
	 ruleBehaviour
{ after(grammarAccess.getBehaviourRule()); } 
	 EOF 
;

// Rule Behaviour
ruleBehaviour 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBehaviourAccess().getGroup()); }
		(rule__Behaviour__Group__0)
		{ after(grammarAccess.getBehaviourAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getAlternatives()); }
		(rule__Action__Alternatives)
		{ after(grammarAccess.getActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMovement
entryRuleMovement
:
{ before(grammarAccess.getMovementRule()); }
	 ruleMovement
{ after(grammarAccess.getMovementRule()); } 
	 EOF 
;

// Rule Movement
ruleMovement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMovementAccess().getAlternatives()); }
		(rule__Movement__Alternatives)
		{ after(grammarAccess.getMovementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveForward
entryRuleMoveForward
:
{ before(grammarAccess.getMoveForwardRule()); }
	 ruleMoveForward
{ after(grammarAccess.getMoveForwardRule()); } 
	 EOF 
;

// Rule MoveForward
ruleMoveForward 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveForwardAccess().getGroup()); }
		(rule__MoveForward__Group__0)
		{ after(grammarAccess.getMoveForwardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveBackward
entryRuleMoveBackward
:
{ before(grammarAccess.getMoveBackwardRule()); }
	 ruleMoveBackward
{ after(grammarAccess.getMoveBackwardRule()); } 
	 EOF 
;

// Rule MoveBackward
ruleMoveBackward 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveBackwardAccess().getGroup()); }
		(rule__MoveBackward__Group__0)
		{ after(grammarAccess.getMoveBackwardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurn
entryRuleTurn
:
{ before(grammarAccess.getTurnRule()); }
	 ruleTurn
{ after(grammarAccess.getTurnRule()); } 
	 EOF 
;

// Rule Turn
ruleTurn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnAccess().getGroup()); }
		(rule__Turn__Group__0)
		{ after(grammarAccess.getTurnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStop
entryRuleStop
:
{ before(grammarAccess.getStopRule()); }
	 ruleStop
{ after(grammarAccess.getStopRule()); } 
	 EOF 
;

// Rule Stop
ruleStop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStopAccess().getGroup()); }
		(rule__Stop__Group__0)
		{ after(grammarAccess.getStopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSound
entryRuleSound
:
{ before(grammarAccess.getSoundRule()); }
	 ruleSound
{ after(grammarAccess.getSoundRule()); } 
	 EOF 
;

// Rule Sound
ruleSound 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSoundAccess().getGroup()); }
		(rule__Sound__Group__0)
		{ after(grammarAccess.getSoundAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIO
entryRuleIO
:
{ before(grammarAccess.getIORule()); }
	 ruleIO
{ after(grammarAccess.getIORule()); } 
	 EOF 
;

// Rule IO
ruleIO 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIOAccess().getGroup()); }
		(rule__IO__Group__0)
		{ after(grammarAccess.getIOAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrigger
entryRuleTrigger
:
{ before(grammarAccess.getTriggerRule()); }
	 ruleTrigger
{ after(grammarAccess.getTriggerRule()); } 
	 EOF 
;

// Rule Trigger
ruleTrigger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTriggerAccess().getGroup()); }
		(rule__Trigger__Group__0)
		{ after(grammarAccess.getTriggerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDevice
entryRuleDevice
:
{ before(grammarAccess.getDeviceRule()); }
	 ruleDevice
{ after(grammarAccess.getDeviceRule()); } 
	 EOF 
;

// Rule Device
ruleDevice 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeviceAccess().getGroup()); }
		(rule__Device__Group__0)
		{ after(grammarAccess.getDeviceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getMovementParserRuleCall_0()); }
		ruleMovement
		{ after(grammarAccess.getActionAccess().getMovementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getSoundParserRuleCall_1()); }
		ruleSound
		{ after(grammarAccess.getActionAccess().getSoundParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getIOParserRuleCall_2()); }
		ruleIO
		{ after(grammarAccess.getActionAccess().getIOParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Movement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMovementAccess().getMoveForwardParserRuleCall_0()); }
		ruleMoveForward
		{ after(grammarAccess.getMovementAccess().getMoveForwardParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMovementAccess().getMoveBackwardParserRuleCall_1()); }
		ruleMoveBackward
		{ after(grammarAccess.getMovementAccess().getMoveBackwardParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getMovementAccess().getTurnParserRuleCall_2()); }
		ruleTurn
		{ after(grammarAccess.getMovementAccess().getTurnParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getMovementAccess().getStopParserRuleCall_3()); }
		ruleStop
		{ after(grammarAccess.getMovementAccess().getStopParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mission__Group__0__Impl
	rule__Mission__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMissionAccess().getMissionKeyword_0()); }
	'Mission'
	{ after(grammarAccess.getMissionAccess().getMissionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mission__Group__1__Impl
	rule__Mission__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMissionAccess().getNameAssignment_1()); }
	(rule__Mission__NameAssignment_1)
	{ after(grammarAccess.getMissionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mission__Group__2__Impl
	rule__Mission__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMissionAccess().getBehavioursKeyword_2()); }
	'Behaviours:'
	{ after(grammarAccess.getMissionAccess().getBehavioursKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mission__Group__3__Impl
	rule__Mission__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMissionAccess().getBehaviourListAssignment_3()); }
		(rule__Mission__BehaviourListAssignment_3)
		{ after(grammarAccess.getMissionAccess().getBehaviourListAssignment_3()); }
	)
	(
		{ before(grammarAccess.getMissionAccess().getBehaviourListAssignment_3()); }
		(rule__Mission__BehaviourListAssignment_3)*
		{ after(grammarAccess.getMissionAccess().getBehaviourListAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mission__Group__4__Impl
	rule__Mission__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMissionAccess().getGoalKeyword_4()); }
	'Goal:'
	{ after(grammarAccess.getMissionAccess().getGoalKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mission__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMissionAccess().getGoalConditionAssignment_5()); }
		(rule__Mission__GoalConditionAssignment_5)
		{ after(grammarAccess.getMissionAccess().getGoalConditionAssignment_5()); }
	)
	(
		{ before(grammarAccess.getMissionAccess().getGoalConditionAssignment_5()); }
		(rule__Mission__GoalConditionAssignment_5)*
		{ after(grammarAccess.getMissionAccess().getGoalConditionAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Behaviour__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Behaviour__Group__0__Impl
	rule__Behaviour__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBehaviourAccess().getBehaviorKeyword_0()); }
	'Behavior:'
	{ after(grammarAccess.getBehaviourAccess().getBehaviorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Behaviour__Group__1__Impl
	rule__Behaviour__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBehaviourAccess().getNameAssignment_1()); }
	(rule__Behaviour__NameAssignment_1)
	{ after(grammarAccess.getBehaviourAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Behaviour__Group__2__Impl
	rule__Behaviour__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBehaviourAccess().getPriorityKeyword_2()); }
	'priority:'
	{ after(grammarAccess.getBehaviourAccess().getPriorityKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Behaviour__Group__3__Impl
	rule__Behaviour__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBehaviourAccess().getPrioAssignment_3()); }
	(rule__Behaviour__PrioAssignment_3)
	{ after(grammarAccess.getBehaviourAccess().getPrioAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Behaviour__Group__4__Impl
	rule__Behaviour__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBehaviourAccess().getDevicesKeyword_4()); }
	'devices:'
	{ after(grammarAccess.getBehaviourAccess().getDevicesKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Behaviour__Group__5__Impl
	rule__Behaviour__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBehaviourAccess().getDeviceListAssignment_5()); }
		(rule__Behaviour__DeviceListAssignment_5)
		{ after(grammarAccess.getBehaviourAccess().getDeviceListAssignment_5()); }
	)
	(
		{ before(grammarAccess.getBehaviourAccess().getDeviceListAssignment_5()); }
		(rule__Behaviour__DeviceListAssignment_5)*
		{ after(grammarAccess.getBehaviourAccess().getDeviceListAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Behaviour__Group__6__Impl
	rule__Behaviour__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBehaviourAccess().getActionsKeyword_6()); }
	'actions:'
	{ after(grammarAccess.getBehaviourAccess().getActionsKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Behaviour__Group__7__Impl
	rule__Behaviour__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBehaviourAccess().getActionListAssignment_7()); }
		(rule__Behaviour__ActionListAssignment_7)
		{ after(grammarAccess.getBehaviourAccess().getActionListAssignment_7()); }
	)
	(
		{ before(grammarAccess.getBehaviourAccess().getActionListAssignment_7()); }
		(rule__Behaviour__ActionListAssignment_7)*
		{ after(grammarAccess.getBehaviourAccess().getActionListAssignment_7()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Behaviour__Group__8__Impl
	rule__Behaviour__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBehaviourAccess().getTriggerKeyword_8()); }
	'trigger:'
	{ after(grammarAccess.getBehaviourAccess().getTriggerKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Behaviour__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBehaviourAccess().getTriggerListAssignment_9()); }
	(rule__Behaviour__TriggerListAssignment_9)
	{ after(grammarAccess.getBehaviourAccess().getTriggerListAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoveForward__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveForward__Group__0__Impl
	rule__MoveForward__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveForward__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveForwardAccess().getForwardSpeedKeyword_0()); }
	'ForwardSpeed:'
	{ after(grammarAccess.getMoveForwardAccess().getForwardSpeedKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveForward__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveForward__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveForward__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveForwardAccess().getFspeedAssignment_1()); }
	(rule__MoveForward__FspeedAssignment_1)
	{ after(grammarAccess.getMoveForwardAccess().getFspeedAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoveBackward__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveBackward__Group__0__Impl
	rule__MoveBackward__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveBackward__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveBackwardAccess().getBackwardSpeedKeyword_0()); }
	'BackwardSpeed:'
	{ after(grammarAccess.getMoveBackwardAccess().getBackwardSpeedKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveBackward__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveBackward__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveBackward__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveBackwardAccess().getBspeedAssignment_1()); }
	(rule__MoveBackward__BspeedAssignment_1)
	{ after(grammarAccess.getMoveBackwardAccess().getBspeedAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Turn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__0__Impl
	rule__Turn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getTurnAngleKeyword_0()); }
	'TurnAngle:'
	{ after(grammarAccess.getTurnAccess().getTurnAngleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getAngleAssignment_1()); }
	(rule__Turn__AngleAssignment_1)
	{ after(grammarAccess.getTurnAccess().getAngleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Stop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stop__Group__0__Impl
	rule__Stop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopAccess().getWaitForKeyword_0()); }
	'WaitFor:'
	{ after(grammarAccess.getStopAccess().getWaitForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stop__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopAccess().getDurationAssignment_1()); }
	(rule__Stop__DurationAssignment_1)
	{ after(grammarAccess.getStopAccess().getDurationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sound__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sound__Group__0__Impl
	rule__Sound__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoundAccess().getPlaySoundKeyword_0()); }
	'PlaySound:'
	{ after(grammarAccess.getSoundAccess().getPlaySoundKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sound__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoundAccess().getSoundNameAssignment_1()); }
	(rule__Sound__SoundNameAssignment_1)
	{ after(grammarAccess.getSoundAccess().getSoundNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IO__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IO__Group__0__Impl
	rule__IO__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IO__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIOAccess().getPrintMessageKeyword_0()); }
	'PrintMessage'
	{ after(grammarAccess.getIOAccess().getPrintMessageKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IO__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IO__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IO__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIOAccess().getMessageAssignment_1()); }
	(rule__IO__MessageAssignment_1)
	{ after(grammarAccess.getIOAccess().getMessageAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Trigger__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trigger__Group__0__Impl
	rule__Trigger__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriggerAccess().getConditionKeyword_0()); }
	'Condition'
	{ after(grammarAccess.getTriggerAccess().getConditionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trigger__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriggerAccess().getConditionAssignment_1()); }
	(rule__Trigger__ConditionAssignment_1)
	{ after(grammarAccess.getTriggerAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Device__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Device__Group__0__Impl
	rule__Device__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviceAccess().getDeviceKeyword_0()); }
	'Device:'
	{ after(grammarAccess.getDeviceAccess().getDeviceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Device__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviceAccess().getTypeAssignment_1()); }
	(rule__Device__TypeAssignment_1)
	{ after(grammarAccess.getDeviceAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mission__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMissionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMissionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__BehaviourListAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMissionAccess().getBehaviourListBehaviourParserRuleCall_3_0()); }
		ruleBehaviour
		{ after(grammarAccess.getMissionAccess().getBehaviourListBehaviourParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__GoalConditionAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMissionAccess().getGoalConditionTriggerParserRuleCall_5_0()); }
		ruleTrigger
		{ after(grammarAccess.getMissionAccess().getGoalConditionTriggerParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBehaviourAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getBehaviourAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__PrioAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBehaviourAccess().getPrioINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getBehaviourAccess().getPrioINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__DeviceListAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBehaviourAccess().getDeviceListDeviceParserRuleCall_5_0()); }
		ruleDevice
		{ after(grammarAccess.getBehaviourAccess().getDeviceListDeviceParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__ActionListAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBehaviourAccess().getActionListActionParserRuleCall_7_0()); }
		ruleAction
		{ after(grammarAccess.getBehaviourAccess().getActionListActionParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__TriggerListAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBehaviourAccess().getTriggerListTriggerParserRuleCall_9_0()); }
		ruleTrigger
		{ after(grammarAccess.getBehaviourAccess().getTriggerListTriggerParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveForward__FspeedAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveForwardAccess().getFspeedINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getMoveForwardAccess().getFspeedINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveBackward__BspeedAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveBackwardAccess().getBspeedINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getMoveBackwardAccess().getBspeedINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__AngleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnAccess().getAngleINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getTurnAccess().getAngleINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__DurationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStopAccess().getDurationINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getStopAccess().getDurationINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__SoundNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoundAccess().getSoundNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getSoundAccess().getSoundNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IO__MessageAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIOAccess().getMessageSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getIOAccess().getMessageSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriggerAccess().getConditionSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getTriggerAccess().getConditionSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeviceAccess().getTypeSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getDeviceAccess().getTypeSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
