/*
 * generated by Xtext 2.10.0
 */
grammar InternalRobotDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package des.missionrobot.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package des.missionrobot.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import des.missionrobot.services.RobotDSLGrammarAccess;

}
@parser::members {
	private RobotDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(RobotDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleBehaviour
entryRuleBehaviour
:
{ before(grammarAccess.getBehaviourRule()); }
	 ruleBehaviour
{ after(grammarAccess.getBehaviourRule()); } 
	 EOF 
;

// Rule Behaviour
ruleBehaviour 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBehaviourAccess().getGroup()); }
		(rule__Behaviour__Group__0)
		{ after(grammarAccess.getBehaviourAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMovement
entryRuleMovement
:
{ before(grammarAccess.getMovementRule()); }
	 ruleMovement
{ after(grammarAccess.getMovementRule()); } 
	 EOF 
;

// Rule Movement
ruleMovement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMovementAccess().getAlternatives()); }
		(rule__Movement__Alternatives)
		{ after(grammarAccess.getMovementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveForward
entryRuleMoveForward
:
{ before(grammarAccess.getMoveForwardRule()); }
	 ruleMoveForward
{ after(grammarAccess.getMoveForwardRule()); } 
	 EOF 
;

// Rule MoveForward
ruleMoveForward 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveForwardAccess().getGroup()); }
		(rule__MoveForward__Group__0)
		{ after(grammarAccess.getMoveForwardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveBackward
entryRuleMoveBackward
:
{ before(grammarAccess.getMoveBackwardRule()); }
	 ruleMoveBackward
{ after(grammarAccess.getMoveBackwardRule()); } 
	 EOF 
;

// Rule MoveBackward
ruleMoveBackward 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveBackwardAccess().getGroup()); }
		(rule__MoveBackward__Group__0)
		{ after(grammarAccess.getMoveBackwardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurn
entryRuleTurn
:
{ before(grammarAccess.getTurnRule()); }
	 ruleTurn
{ after(grammarAccess.getTurnRule()); } 
	 EOF 
;

// Rule Turn
ruleTurn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnAccess().getGroup()); }
		(rule__Turn__Group__0)
		{ after(grammarAccess.getTurnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStop
entryRuleStop
:
{ before(grammarAccess.getStopRule()); }
	 ruleStop
{ after(grammarAccess.getStopRule()); } 
	 EOF 
;

// Rule Stop
ruleStop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStopAccess().getGroup()); }
		(rule__Stop__Group__0)
		{ after(grammarAccess.getStopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Movement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMovementAccess().getMoveForwardParserRuleCall_0()); }
		ruleMoveForward
		{ after(grammarAccess.getMovementAccess().getMoveForwardParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMovementAccess().getMoveBackwardParserRuleCall_1()); }
		ruleMoveBackward
		{ after(grammarAccess.getMovementAccess().getMoveBackwardParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getMovementAccess().getTurnParserRuleCall_2()); }
		ruleTurn
		{ after(grammarAccess.getMovementAccess().getTurnParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getMovementAccess().getStopParserRuleCall_3()); }
		ruleStop
		{ after(grammarAccess.getMovementAccess().getStopParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Behaviour__Group__0__Impl
	rule__Behaviour__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBehaviourAccess().getBehaviorKeyword_0()); }
	'Behavior'
	{ after(grammarAccess.getBehaviourAccess().getBehaviorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Behaviour__Group__1__Impl
	rule__Behaviour__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBehaviourAccess().getNameAssignment_1()); }
	(rule__Behaviour__NameAssignment_1)
	{ after(grammarAccess.getBehaviourAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Behaviour__Group__2__Impl
	rule__Behaviour__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBehaviourAccess().getPriorityKeyword_2()); }
	'priority'
	{ after(grammarAccess.getBehaviourAccess().getPriorityKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Behaviour__Group__3__Impl
	rule__Behaviour__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBehaviourAccess().getPrioAssignment_3()); }
	(rule__Behaviour__PrioAssignment_3)
	{ after(grammarAccess.getBehaviourAccess().getPrioAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Behaviour__Group__4__Impl
	rule__Behaviour__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBehaviourAccess().getMovementsKeyword_4()); }
	'movements:'
	{ after(grammarAccess.getBehaviourAccess().getMovementsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Behaviour__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBehaviourAccess().getMovesAssignment_5()); }
	(rule__Behaviour__MovesAssignment_5)
	{ after(grammarAccess.getBehaviourAccess().getMovesAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoveForward__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveForward__Group__0__Impl
	rule__MoveForward__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveForward__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveForwardAccess().getForwardSpeedKeyword_0()); }
	'ForwardSpeed:'
	{ after(grammarAccess.getMoveForwardAccess().getForwardSpeedKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveForward__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveForward__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveForward__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveForwardAccess().getFspeedAssignment_1()); }
	(rule__MoveForward__FspeedAssignment_1)
	{ after(grammarAccess.getMoveForwardAccess().getFspeedAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoveBackward__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveBackward__Group__0__Impl
	rule__MoveBackward__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveBackward__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveBackwardAccess().getBackwardSpeedKeyword_0()); }
	'BackwardSpeed:'
	{ after(grammarAccess.getMoveBackwardAccess().getBackwardSpeedKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveBackward__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveBackward__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveBackward__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveBackwardAccess().getBspeedAssignment_1()); }
	(rule__MoveBackward__BspeedAssignment_1)
	{ after(grammarAccess.getMoveBackwardAccess().getBspeedAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Turn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__0__Impl
	rule__Turn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getTurnAngleKeyword_0()); }
	'TurnAngle:'
	{ after(grammarAccess.getTurnAccess().getTurnAngleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getAngleAssignment_1()); }
	(rule__Turn__AngleAssignment_1)
	{ after(grammarAccess.getTurnAccess().getAngleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Stop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stop__Group__0__Impl
	rule__Stop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopAccess().getWaitForKeyword_0()); }
	'WaitFor:'
	{ after(grammarAccess.getStopAccess().getWaitForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stop__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopAccess().getDurationAssignment_1()); }
	(rule__Stop__DurationAssignment_1)
	{ after(grammarAccess.getStopAccess().getDurationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Behaviour__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBehaviourAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getBehaviourAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__PrioAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBehaviourAccess().getPrioINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getBehaviourAccess().getPrioINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__MovesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBehaviourAccess().getMovesMovementParserRuleCall_5_0()); }
		ruleMovement
		{ after(grammarAccess.getBehaviourAccess().getMovesMovementParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveForward__FspeedAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveForwardAccess().getFspeedINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getMoveForwardAccess().getFspeedINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveBackward__BspeedAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveBackwardAccess().getBspeedINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getMoveBackwardAccess().getBspeedINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__AngleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnAccess().getAngleINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getTurnAccess().getAngleINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__DurationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStopAccess().getDurationINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getStopAccess().getDurationINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
