/*
 * generated by Xtext 2.10.0
 */
package des.missionrobot.ide.contentassist.antlr;

import com.google.inject.Inject;
import des.missionrobot.ide.contentassist.antlr.internal.InternalRobotDSLParser;
import des.missionrobot.services.RobotDSLGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class RobotDSLParser extends AbstractContentAssistParser {

	@Inject
	private RobotDSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRobotDSLParser createParser() {
		InternalRobotDSLParser result = new InternalRobotDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getEventAccess().getAlternatives(), "rule__Event__Alternatives");
					put(grammarAccess.getTriggerAccess().getAlternatives_3(), "rule__Trigger__Alternatives_3");
					put(grammarAccess.getDirectionAccess().getAlternatives(), "rule__Direction__Alternatives");
					put(grammarAccess.getSpeedAccess().getAlternatives(), "rule__Speed__Alternatives");
					put(grammarAccess.getArmOpAccess().getAlternatives(), "rule__ArmOp__Alternatives");
					put(grammarAccess.getSoundAccess().getAlternatives(), "rule__Sound__Alternatives");
					put(grammarAccess.getSensorAccess().getAlternatives(), "rule__Sensor__Alternatives");
					put(grammarAccess.getColorAccess().getAlternatives(), "rule__Color__Alternatives");
					put(grammarAccess.getBoolAccess().getAlternatives(), "rule__Bool__Alternatives");
					put(grammarAccess.getRepeatAccess().getAlternatives(), "rule__Repeat__Alternatives");
					put(grammarAccess.getMissionAccess().getGroup(), "rule__Mission__Group__0");
					put(grammarAccess.getBehaviorAccess().getGroup(), "rule__Behavior__Group__0");
					put(grammarAccess.getBehaviorAccess().getGroup_4(), "rule__Behavior__Group_4__0");
					put(grammarAccess.getBehaviorAccess().getGroup_4_0(), "rule__Behavior__Group_4_0__0");
					put(grammarAccess.getBehaviorAccess().getGroup_4_1(), "rule__Behavior__Group_4_1__0");
					put(grammarAccess.getBehaviorAccess().getGroup_5(), "rule__Behavior__Group_5__0");
					put(grammarAccess.getActionAccess().getGroup_0(), "rule__Action__Group_0__0");
					put(grammarAccess.getActionAccess().getGroup_0_2(), "rule__Action__Group_0_2__0");
					put(grammarAccess.getActionAccess().getGroup_0_3(), "rule__Action__Group_0_3__0");
					put(grammarAccess.getActionAccess().getGroup_1(), "rule__Action__Group_1__0");
					put(grammarAccess.getActionAccess().getGroup_2(), "rule__Action__Group_2__0");
					put(grammarAccess.getActionAccess().getGroup_3(), "rule__Action__Group_3__0");
					put(grammarAccess.getReactionAccess().getGroup(), "rule__Reaction__Group__0");
					put(grammarAccess.getEventAccess().getGroup_0(), "rule__Event__Group_0__0");
					put(grammarAccess.getEventAccess().getGroup_1(), "rule__Event__Group_1__0");
					put(grammarAccess.getTriggerAccess().getGroup(), "rule__Trigger__Group__0");
					put(grammarAccess.getTriggerAccess().getGroup_3_0(), "rule__Trigger__Group_3_0__0");
					put(grammarAccess.getTriggerAccess().getGroup_3_1(), "rule__Trigger__Group_3_1__0");
					put(grammarAccess.getMissionListAccess().getMissionListAssignment(), "rule__MissionList__MissionListAssignment");
					put(grammarAccess.getMissionAccess().getNameAssignment_1(), "rule__Mission__NameAssignment_1");
					put(grammarAccess.getMissionAccess().getBehaviorListAssignment_3(), "rule__Mission__BehaviorListAssignment_3");
					put(grammarAccess.getMissionAccess().getGoalEventsAssignment_5(), "rule__Mission__GoalEventsAssignment_5");
					put(grammarAccess.getBehaviorAccess().getNameAssignment_1(), "rule__Behavior__NameAssignment_1");
					put(grammarAccess.getBehaviorAccess().getPrioAssignment_3(), "rule__Behavior__PrioAssignment_3");
					put(grammarAccess.getBehaviorAccess().getTriggerListAssignment_4_0_1(), "rule__Behavior__TriggerListAssignment_4_0_1");
					put(grammarAccess.getBehaviorAccess().getReactionListAssignment_4_1_1(), "rule__Behavior__ReactionListAssignment_4_1_1");
					put(grammarAccess.getBehaviorAccess().getActionListAssignment_5_1(), "rule__Behavior__ActionListAssignment_5_1");
					put(grammarAccess.getActionAccess().getDirAssignment_0_1(), "rule__Action__DirAssignment_0_1");
					put(grammarAccess.getActionAccess().getDurationAssignment_0_2_1(), "rule__Action__DurationAssignment_0_2_1");
					put(grammarAccess.getActionAccess().getSpeedAssignment_0_3_1(), "rule__Action__SpeedAssignment_0_3_1");
					put(grammarAccess.getActionAccess().getDirAssignment_1_1(), "rule__Action__DirAssignment_1_1");
					put(grammarAccess.getActionAccess().getDegrAssignment_1_2(), "rule__Action__DegrAssignment_1_2");
					put(grammarAccess.getActionAccess().getOpAssignment_2_1(), "rule__Action__OpAssignment_2_1");
					put(grammarAccess.getActionAccess().getSoundAssignment_3_2(), "rule__Action__SoundAssignment_3_2");
					put(grammarAccess.getReactionAccess().getEventAssignment_1(), "rule__Reaction__EventAssignment_1");
					put(grammarAccess.getReactionAccess().getReactionsAssignment_4(), "rule__Reaction__ReactionsAssignment_4");
					put(grammarAccess.getEventAccess().getNameAssignment_0_1(), "rule__Event__NameAssignment_0_1");
					put(grammarAccess.getEventAccess().getRepeatAssignment_0_2(), "rule__Event__RepeatAssignment_0_2");
					put(grammarAccess.getEventAccess().getTimeAssignment_1_1(), "rule__Event__TimeAssignment_1_1");
					put(grammarAccess.getTriggerAccess().getBoolTypeAssignment_0(), "rule__Trigger__BoolTypeAssignment_0");
					put(grammarAccess.getTriggerAccess().getEventAssignment_1(), "rule__Trigger__EventAssignment_1");
					put(grammarAccess.getTriggerAccess().getSensorAssignment_2(), "rule__Trigger__SensorAssignment_2");
					put(grammarAccess.getTriggerAccess().getColorAssignment_3_0_1(), "rule__Trigger__ColorAssignment_3_0_1");
					put(grammarAccess.getTriggerAccess().getBoolAssignment_3_1_1(), "rule__Trigger__BoolAssignment_3_1_1");
					put(grammarAccess.getTriggerAccess().getDistanceAssignment_3_1_3(), "rule__Trigger__DistanceAssignment_3_1_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalRobotDSLParser typedParser = (InternalRobotDSLParser) parser;
			typedParser.entryRuleMissionList();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RobotDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RobotDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
