/**
 * generated by Xtext 2.10.0
 */
package des.missionrobot.validation;

import com.google.common.base.Objects;
import des.missionrobot.robotDSL.Mission;
import des.missionrobot.robotDSL.RobotDSLPackage;
import des.missionrobot.robotDSL.Task;
import des.missionrobot.validation.AbstractRobotDSLValidator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class RobotDSLValidator extends AbstractRobotDSLValidator {
  @Check
  public void checkPriorityCorrect(final Mission m) {
    EList<Task> _taskList = m.getTaskList();
    Task _head = IterableExtensions.<Task>head(_taskList);
    int _prio = _head.getPrio();
    boolean _equals = (_prio == 1);
    if (_equals) {
      this.warning("Priority should be unique", RobotDSLPackage.Literals.TASK__PRIO);
    }
  }
  
  @Check
  public void checkButtStuff(final Task t) {
    String _name = t.getName();
    boolean _equals = Objects.equal(_name, "butt");
    if (_equals) {
      this.warning("name should not be butt", RobotDSLPackage.Literals.TASK__NAME);
    }
  }
}
