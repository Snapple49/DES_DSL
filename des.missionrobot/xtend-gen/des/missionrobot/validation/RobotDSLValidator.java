/**
 * generated by Xtext 2.10.0
 */
package des.missionrobot.validation;

import com.google.common.base.Objects;
import des.missionrobot.robotDSL.Action;
import des.missionrobot.robotDSL.DirectionVal;
import des.missionrobot.robotDSL.Distance;
import des.missionrobot.robotDSL.Mission;
import des.missionrobot.robotDSL.Task;
import des.missionrobot.robotDSL.Time;
import des.missionrobot.validation.AbstractRobotDSLValidator;
import java.util.HashSet;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class RobotDSLValidator extends AbstractRobotDSLValidator {
  @Check
  public void checkPriorityCorrect(final Mission m) {
    HashSet<Integer> prios = new HashSet<Integer>();
    boolean notUnique = false;
    boolean notValid = false;
    EList<Task> _taskList = m.getTaskList();
    for (final Task t : _taskList) {
      {
        int _prio = t.getPrio();
        boolean _add = prios.add(Integer.valueOf(_prio));
        boolean _not = (!_add);
        if (_not) {
          notUnique = true;
        }
        if (((t.getPrio() >= 99) || (t.getPrio() <= 0))) {
          notValid = true;
        }
      }
    }
    if (notValid) {
      this.error("Task priorities must be between 2 and 98 including", null);
    }
    if (notUnique) {
      this.error("Tasks must have unique priorities within mission", null);
    }
  }
  
  @Check
  public void checkDurationCorrect(final Action a) {
    int _duration = a.getDuration();
    boolean _lessThan = (_duration < 0);
    if (_lessThan) {
      this.warning("Duration should be > 0", null);
    }
  }
  
  @Check
  public void checkMoveDirCorrect(final Action a) {
    if ((Objects.equal(a.getMoveDir(), DirectionVal.LEFT) || Objects.equal(a.getMoveDir(), DirectionVal.RIGHT))) {
      this.warning("Move can have directions \'forward\' or \'backward\'", null);
    }
  }
  
  @Check
  public void checkTurnDirCorrect(final Action a) {
    if ((Objects.equal(a.getTurnDir(), DirectionVal.FORWARD) || Objects.equal(a.getMoveDir(), DirectionVal.BACKWARD))) {
      this.warning("Turn can have directions \'left\' or \'right\'", null);
    }
  }
  
  @Check
  public void checkDistCorrect(final Distance d) {
    int _distance = d.getDistance();
    boolean _lessThan = (_distance < 0);
    if (_lessThan) {
      this.warning("Distance has to be >= 0", null);
    }
  }
  
  @Check
  public void checkTimeCorrect(final Time t) {
    int _sec = t.getSec();
    boolean _lessThan = (_sec < 0);
    if (_lessThan) {
      this.warning("Time has to be >= 0", null);
    }
  }
}
