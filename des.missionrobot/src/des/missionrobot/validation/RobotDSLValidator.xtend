/*
 * generated by Xtext 2.10.0
 */
package des.missionrobot.validation

import des.missionrobot.robotDSL.Missions
import org.eclipse.xtext.validation.Check
import des.missionrobot.robotDSL.Mission
import des.missionrobot.robotDSL.Task
import java.util.List
import java.util.HashSet
import java.util.Set
import org.eclipse.emf.common.util.EList
import des.missionrobot.robotDSL.RobotDSLPackage
import java.util.ArrayList

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class RobotDSLValidator extends AbstractRobotDSLValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					RobotDSLPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
	@Check
	def checkPriorityCorrect(Mission m){
		var prios = new HashSet<Integer>()
		var notUnique = false
		var notValid = false
		for (Task t : m.taskList) {
			if(!prios.add(t.prio)){
				notUnique = true
			}
			if(t.prio >= 99 || t.prio <= 0){
				notValid = true
			}
		}
		if(notValid){
			error('Task priorities must be between 2 and 98 including', null)
		}
		if(notUnique){
			error('Tasks must have unique priorities within mission', null)
		}
		
	}
	
	@Check
	def checkButtStuff(Task t){
		if(t.name == "butt"){
			warning('name should not be butt', RobotDSLPackage.Literals.TASK__NAME)
		}
	}
	
}
