/**
 * generated by Xtext 2.10.0
 */
package des.missionrobot.robotDSL.impl;

import des.missionrobot.robotDSL.Bool;
import des.missionrobot.robotDSL.Color;
import des.missionrobot.robotDSL.Distance;
import des.missionrobot.robotDSL.Flag;
import des.missionrobot.robotDSL.Negation;
import des.missionrobot.robotDSL.RobotDSLPackage;
import des.missionrobot.robotDSL.Sensor;
import des.missionrobot.robotDSL.Trigger;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Trigger</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link des.missionrobot.robotDSL.impl.TriggerImpl#getBoolType <em>Bool Type</em>}</li>
 *   <li>{@link des.missionrobot.robotDSL.impl.TriggerImpl#getNeg <em>Neg</em>}</li>
 *   <li>{@link des.missionrobot.robotDSL.impl.TriggerImpl#getFlag <em>Flag</em>}</li>
 *   <li>{@link des.missionrobot.robotDSL.impl.TriggerImpl#getSensor <em>Sensor</em>}</li>
 *   <li>{@link des.missionrobot.robotDSL.impl.TriggerImpl#getColor <em>Color</em>}</li>
 *   <li>{@link des.missionrobot.robotDSL.impl.TriggerImpl#getDist <em>Dist</em>}</li>
 *   <li>{@link des.missionrobot.robotDSL.impl.TriggerImpl#getTouching <em>Touching</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TriggerImpl extends MinimalEObjectImpl.Container implements Trigger
{
  /**
   * The cached value of the '{@link #getBoolType() <em>Bool Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBoolType()
   * @generated
   * @ordered
   */
  protected Bool boolType;

  /**
   * The cached value of the '{@link #getNeg() <em>Neg</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNeg()
   * @generated
   * @ordered
   */
  protected Negation neg;

  /**
   * The cached value of the '{@link #getFlag() <em>Flag</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlag()
   * @generated
   * @ordered
   */
  protected Flag flag;

  /**
   * The cached value of the '{@link #getSensor() <em>Sensor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSensor()
   * @generated
   * @ordered
   */
  protected Sensor sensor;

  /**
   * The cached value of the '{@link #getColor() <em>Color</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor()
   * @generated
   * @ordered
   */
  protected Color color;

  /**
   * The cached value of the '{@link #getDist() <em>Dist</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDist()
   * @generated
   * @ordered
   */
  protected Distance dist;

  /**
   * The cached value of the '{@link #getTouching() <em>Touching</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTouching()
   * @generated
   * @ordered
   */
  protected Bool touching;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TriggerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RobotDSLPackage.Literals.TRIGGER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bool getBoolType()
  {
    return boolType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBoolType(Bool newBoolType, NotificationChain msgs)
  {
    Bool oldBoolType = boolType;
    boolType = newBoolType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__BOOL_TYPE, oldBoolType, newBoolType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBoolType(Bool newBoolType)
  {
    if (newBoolType != boolType)
    {
      NotificationChain msgs = null;
      if (boolType != null)
        msgs = ((InternalEObject)boolType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RobotDSLPackage.TRIGGER__BOOL_TYPE, null, msgs);
      if (newBoolType != null)
        msgs = ((InternalEObject)newBoolType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RobotDSLPackage.TRIGGER__BOOL_TYPE, null, msgs);
      msgs = basicSetBoolType(newBoolType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__BOOL_TYPE, newBoolType, newBoolType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Negation getNeg()
  {
    return neg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNeg(Negation newNeg, NotificationChain msgs)
  {
    Negation oldNeg = neg;
    neg = newNeg;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__NEG, oldNeg, newNeg);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNeg(Negation newNeg)
  {
    if (newNeg != neg)
    {
      NotificationChain msgs = null;
      if (neg != null)
        msgs = ((InternalEObject)neg).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RobotDSLPackage.TRIGGER__NEG, null, msgs);
      if (newNeg != null)
        msgs = ((InternalEObject)newNeg).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RobotDSLPackage.TRIGGER__NEG, null, msgs);
      msgs = basicSetNeg(newNeg, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__NEG, newNeg, newNeg));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Flag getFlag()
  {
    if (flag != null && flag.eIsProxy())
    {
      InternalEObject oldFlag = (InternalEObject)flag;
      flag = (Flag)eResolveProxy(oldFlag);
      if (flag != oldFlag)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RobotDSLPackage.TRIGGER__FLAG, oldFlag, flag));
      }
    }
    return flag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Flag basicGetFlag()
  {
    return flag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFlag(Flag newFlag)
  {
    Flag oldFlag = flag;
    flag = newFlag;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__FLAG, oldFlag, flag));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Sensor getSensor()
  {
    return sensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSensor(Sensor newSensor, NotificationChain msgs)
  {
    Sensor oldSensor = sensor;
    sensor = newSensor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__SENSOR, oldSensor, newSensor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSensor(Sensor newSensor)
  {
    if (newSensor != sensor)
    {
      NotificationChain msgs = null;
      if (sensor != null)
        msgs = ((InternalEObject)sensor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RobotDSLPackage.TRIGGER__SENSOR, null, msgs);
      if (newSensor != null)
        msgs = ((InternalEObject)newSensor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RobotDSLPackage.TRIGGER__SENSOR, null, msgs);
      msgs = basicSetSensor(newSensor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__SENSOR, newSensor, newSensor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Color getColor()
  {
    return color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetColor(Color newColor, NotificationChain msgs)
  {
    Color oldColor = color;
    color = newColor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__COLOR, oldColor, newColor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setColor(Color newColor)
  {
    if (newColor != color)
    {
      NotificationChain msgs = null;
      if (color != null)
        msgs = ((InternalEObject)color).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RobotDSLPackage.TRIGGER__COLOR, null, msgs);
      if (newColor != null)
        msgs = ((InternalEObject)newColor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RobotDSLPackage.TRIGGER__COLOR, null, msgs);
      msgs = basicSetColor(newColor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__COLOR, newColor, newColor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Distance getDist()
  {
    return dist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDist(Distance newDist, NotificationChain msgs)
  {
    Distance oldDist = dist;
    dist = newDist;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__DIST, oldDist, newDist);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDist(Distance newDist)
  {
    if (newDist != dist)
    {
      NotificationChain msgs = null;
      if (dist != null)
        msgs = ((InternalEObject)dist).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RobotDSLPackage.TRIGGER__DIST, null, msgs);
      if (newDist != null)
        msgs = ((InternalEObject)newDist).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RobotDSLPackage.TRIGGER__DIST, null, msgs);
      msgs = basicSetDist(newDist, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__DIST, newDist, newDist));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bool getTouching()
  {
    return touching;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTouching(Bool newTouching, NotificationChain msgs)
  {
    Bool oldTouching = touching;
    touching = newTouching;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__TOUCHING, oldTouching, newTouching);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTouching(Bool newTouching)
  {
    if (newTouching != touching)
    {
      NotificationChain msgs = null;
      if (touching != null)
        msgs = ((InternalEObject)touching).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RobotDSLPackage.TRIGGER__TOUCHING, null, msgs);
      if (newTouching != null)
        msgs = ((InternalEObject)newTouching).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RobotDSLPackage.TRIGGER__TOUCHING, null, msgs);
      msgs = basicSetTouching(newTouching, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__TOUCHING, newTouching, newTouching));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RobotDSLPackage.TRIGGER__BOOL_TYPE:
        return basicSetBoolType(null, msgs);
      case RobotDSLPackage.TRIGGER__NEG:
        return basicSetNeg(null, msgs);
      case RobotDSLPackage.TRIGGER__SENSOR:
        return basicSetSensor(null, msgs);
      case RobotDSLPackage.TRIGGER__COLOR:
        return basicSetColor(null, msgs);
      case RobotDSLPackage.TRIGGER__DIST:
        return basicSetDist(null, msgs);
      case RobotDSLPackage.TRIGGER__TOUCHING:
        return basicSetTouching(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RobotDSLPackage.TRIGGER__BOOL_TYPE:
        return getBoolType();
      case RobotDSLPackage.TRIGGER__NEG:
        return getNeg();
      case RobotDSLPackage.TRIGGER__FLAG:
        if (resolve) return getFlag();
        return basicGetFlag();
      case RobotDSLPackage.TRIGGER__SENSOR:
        return getSensor();
      case RobotDSLPackage.TRIGGER__COLOR:
        return getColor();
      case RobotDSLPackage.TRIGGER__DIST:
        return getDist();
      case RobotDSLPackage.TRIGGER__TOUCHING:
        return getTouching();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RobotDSLPackage.TRIGGER__BOOL_TYPE:
        setBoolType((Bool)newValue);
        return;
      case RobotDSLPackage.TRIGGER__NEG:
        setNeg((Negation)newValue);
        return;
      case RobotDSLPackage.TRIGGER__FLAG:
        setFlag((Flag)newValue);
        return;
      case RobotDSLPackage.TRIGGER__SENSOR:
        setSensor((Sensor)newValue);
        return;
      case RobotDSLPackage.TRIGGER__COLOR:
        setColor((Color)newValue);
        return;
      case RobotDSLPackage.TRIGGER__DIST:
        setDist((Distance)newValue);
        return;
      case RobotDSLPackage.TRIGGER__TOUCHING:
        setTouching((Bool)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RobotDSLPackage.TRIGGER__BOOL_TYPE:
        setBoolType((Bool)null);
        return;
      case RobotDSLPackage.TRIGGER__NEG:
        setNeg((Negation)null);
        return;
      case RobotDSLPackage.TRIGGER__FLAG:
        setFlag((Flag)null);
        return;
      case RobotDSLPackage.TRIGGER__SENSOR:
        setSensor((Sensor)null);
        return;
      case RobotDSLPackage.TRIGGER__COLOR:
        setColor((Color)null);
        return;
      case RobotDSLPackage.TRIGGER__DIST:
        setDist((Distance)null);
        return;
      case RobotDSLPackage.TRIGGER__TOUCHING:
        setTouching((Bool)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RobotDSLPackage.TRIGGER__BOOL_TYPE:
        return boolType != null;
      case RobotDSLPackage.TRIGGER__NEG:
        return neg != null;
      case RobotDSLPackage.TRIGGER__FLAG:
        return flag != null;
      case RobotDSLPackage.TRIGGER__SENSOR:
        return sensor != null;
      case RobotDSLPackage.TRIGGER__COLOR:
        return color != null;
      case RobotDSLPackage.TRIGGER__DIST:
        return dist != null;
      case RobotDSLPackage.TRIGGER__TOUCHING:
        return touching != null;
    }
    return super.eIsSet(featureID);
  }

} //TriggerImpl
