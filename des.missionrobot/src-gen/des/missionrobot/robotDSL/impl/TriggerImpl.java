/**
 * generated by Xtext 2.10.0
 */
package des.missionrobot.robotDSL.impl;

import des.missionrobot.robotDSL.Bool;
import des.missionrobot.robotDSL.Color;
import des.missionrobot.robotDSL.Event;
import des.missionrobot.robotDSL.RobotDSLPackage;
import des.missionrobot.robotDSL.Sensor;
import des.missionrobot.robotDSL.Trigger;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Trigger</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link des.missionrobot.robotDSL.impl.TriggerImpl#getBoolType <em>Bool Type</em>}</li>
 *   <li>{@link des.missionrobot.robotDSL.impl.TriggerImpl#getEvent <em>Event</em>}</li>
 *   <li>{@link des.missionrobot.robotDSL.impl.TriggerImpl#getSensor <em>Sensor</em>}</li>
 *   <li>{@link des.missionrobot.robotDSL.impl.TriggerImpl#getColor <em>Color</em>}</li>
 *   <li>{@link des.missionrobot.robotDSL.impl.TriggerImpl#getBool <em>Bool</em>}</li>
 *   <li>{@link des.missionrobot.robotDSL.impl.TriggerImpl#getDistance <em>Distance</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TriggerImpl extends MinimalEObjectImpl.Container implements Trigger
{
  /**
   * The default value of the '{@link #getBoolType() <em>Bool Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBoolType()
   * @generated
   * @ordered
   */
  protected static final Bool BOOL_TYPE_EDEFAULT = Bool.L;

  /**
   * The cached value of the '{@link #getBoolType() <em>Bool Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBoolType()
   * @generated
   * @ordered
   */
  protected Bool boolType = BOOL_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getEvent() <em>Event</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected Event event;

  /**
   * The default value of the '{@link #getSensor() <em>Sensor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSensor()
   * @generated
   * @ordered
   */
  protected static final Sensor SENSOR_EDEFAULT = Sensor.COLOR;

  /**
   * The cached value of the '{@link #getSensor() <em>Sensor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSensor()
   * @generated
   * @ordered
   */
  protected Sensor sensor = SENSOR_EDEFAULT;

  /**
   * The default value of the '{@link #getColor() <em>Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor()
   * @generated
   * @ordered
   */
  protected static final Color COLOR_EDEFAULT = Color.RED;

  /**
   * The cached value of the '{@link #getColor() <em>Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor()
   * @generated
   * @ordered
   */
  protected Color color = COLOR_EDEFAULT;

  /**
   * The default value of the '{@link #getBool() <em>Bool</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBool()
   * @generated
   * @ordered
   */
  protected static final Bool BOOL_EDEFAULT = Bool.L;

  /**
   * The cached value of the '{@link #getBool() <em>Bool</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBool()
   * @generated
   * @ordered
   */
  protected Bool bool = BOOL_EDEFAULT;

  /**
   * The default value of the '{@link #getDistance() <em>Distance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDistance()
   * @generated
   * @ordered
   */
  protected static final int DISTANCE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getDistance() <em>Distance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDistance()
   * @generated
   * @ordered
   */
  protected int distance = DISTANCE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TriggerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RobotDSLPackage.Literals.TRIGGER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bool getBoolType()
  {
    return boolType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBoolType(Bool newBoolType)
  {
    Bool oldBoolType = boolType;
    boolType = newBoolType == null ? BOOL_TYPE_EDEFAULT : newBoolType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__BOOL_TYPE, oldBoolType, boolType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Event getEvent()
  {
    if (event != null && event.eIsProxy())
    {
      InternalEObject oldEvent = (InternalEObject)event;
      event = (Event)eResolveProxy(oldEvent);
      if (event != oldEvent)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RobotDSLPackage.TRIGGER__EVENT, oldEvent, event));
      }
    }
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Event basicGetEvent()
  {
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEvent(Event newEvent)
  {
    Event oldEvent = event;
    event = newEvent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__EVENT, oldEvent, event));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Sensor getSensor()
  {
    return sensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSensor(Sensor newSensor)
  {
    Sensor oldSensor = sensor;
    sensor = newSensor == null ? SENSOR_EDEFAULT : newSensor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__SENSOR, oldSensor, sensor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Color getColor()
  {
    return color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setColor(Color newColor)
  {
    Color oldColor = color;
    color = newColor == null ? COLOR_EDEFAULT : newColor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__COLOR, oldColor, color));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bool getBool()
  {
    return bool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBool(Bool newBool)
  {
    Bool oldBool = bool;
    bool = newBool == null ? BOOL_EDEFAULT : newBool;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__BOOL, oldBool, bool));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getDistance()
  {
    return distance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDistance(int newDistance)
  {
    int oldDistance = distance;
    distance = newDistance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobotDSLPackage.TRIGGER__DISTANCE, oldDistance, distance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RobotDSLPackage.TRIGGER__BOOL_TYPE:
        return getBoolType();
      case RobotDSLPackage.TRIGGER__EVENT:
        if (resolve) return getEvent();
        return basicGetEvent();
      case RobotDSLPackage.TRIGGER__SENSOR:
        return getSensor();
      case RobotDSLPackage.TRIGGER__COLOR:
        return getColor();
      case RobotDSLPackage.TRIGGER__BOOL:
        return getBool();
      case RobotDSLPackage.TRIGGER__DISTANCE:
        return getDistance();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RobotDSLPackage.TRIGGER__BOOL_TYPE:
        setBoolType((Bool)newValue);
        return;
      case RobotDSLPackage.TRIGGER__EVENT:
        setEvent((Event)newValue);
        return;
      case RobotDSLPackage.TRIGGER__SENSOR:
        setSensor((Sensor)newValue);
        return;
      case RobotDSLPackage.TRIGGER__COLOR:
        setColor((Color)newValue);
        return;
      case RobotDSLPackage.TRIGGER__BOOL:
        setBool((Bool)newValue);
        return;
      case RobotDSLPackage.TRIGGER__DISTANCE:
        setDistance((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RobotDSLPackage.TRIGGER__BOOL_TYPE:
        setBoolType(BOOL_TYPE_EDEFAULT);
        return;
      case RobotDSLPackage.TRIGGER__EVENT:
        setEvent((Event)null);
        return;
      case RobotDSLPackage.TRIGGER__SENSOR:
        setSensor(SENSOR_EDEFAULT);
        return;
      case RobotDSLPackage.TRIGGER__COLOR:
        setColor(COLOR_EDEFAULT);
        return;
      case RobotDSLPackage.TRIGGER__BOOL:
        setBool(BOOL_EDEFAULT);
        return;
      case RobotDSLPackage.TRIGGER__DISTANCE:
        setDistance(DISTANCE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RobotDSLPackage.TRIGGER__BOOL_TYPE:
        return boolType != BOOL_TYPE_EDEFAULT;
      case RobotDSLPackage.TRIGGER__EVENT:
        return event != null;
      case RobotDSLPackage.TRIGGER__SENSOR:
        return sensor != SENSOR_EDEFAULT;
      case RobotDSLPackage.TRIGGER__COLOR:
        return color != COLOR_EDEFAULT;
      case RobotDSLPackage.TRIGGER__BOOL:
        return bool != BOOL_EDEFAULT;
      case RobotDSLPackage.TRIGGER__DISTANCE:
        return distance != DISTANCE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (boolType: ");
    result.append(boolType);
    result.append(", sensor: ");
    result.append(sensor);
    result.append(", color: ");
    result.append(color);
    result.append(", bool: ");
    result.append(bool);
    result.append(", distance: ");
    result.append(distance);
    result.append(')');
    return result.toString();
  }

} //TriggerImpl
