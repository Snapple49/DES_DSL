/**
 * generated by Xtext 2.10.0
 */
package des.missionrobot.robotDSL.impl;

import des.missionrobot.robotDSL.Action;
import des.missionrobot.robotDSL.Flag;
import des.missionrobot.robotDSL.Mission;
import des.missionrobot.robotDSL.RobotDSLPackage;
import des.missionrobot.robotDSL.Task;
import des.missionrobot.robotDSL.Time;
import des.missionrobot.robotDSL.Trigger;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mission</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link des.missionrobot.robotDSL.impl.MissionImpl#getName <em>Name</em>}</li>
 *   <li>{@link des.missionrobot.robotDSL.impl.MissionImpl#getFlagsList <em>Flags List</em>}</li>
 *   <li>{@link des.missionrobot.robotDSL.impl.MissionImpl#getBehaviorList <em>Behavior List</em>}</li>
 *   <li>{@link des.missionrobot.robotDSL.impl.MissionImpl#getGoalEvents <em>Goal Events</em>}</li>
 *   <li>{@link des.missionrobot.robotDSL.impl.MissionImpl#getTimeout <em>Timeout</em>}</li>
 *   <li>{@link des.missionrobot.robotDSL.impl.MissionImpl#getFinishActions <em>Finish Actions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MissionImpl extends MinimalEObjectImpl.Container implements Mission
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getFlagsList() <em>Flags List</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlagsList()
   * @generated
   * @ordered
   */
  protected EList<Flag> flagsList;

  /**
   * The cached value of the '{@link #getBehaviorList() <em>Behavior List</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBehaviorList()
   * @generated
   * @ordered
   */
  protected EList<Task> behaviorList;

  /**
   * The cached value of the '{@link #getGoalEvents() <em>Goal Events</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGoalEvents()
   * @generated
   * @ordered
   */
  protected EList<Trigger> goalEvents;

  /**
   * The cached value of the '{@link #getTimeout() <em>Timeout</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeout()
   * @generated
   * @ordered
   */
  protected Time timeout;

  /**
   * The cached value of the '{@link #getFinishActions() <em>Finish Actions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFinishActions()
   * @generated
   * @ordered
   */
  protected EList<Action> finishActions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MissionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RobotDSLPackage.Literals.MISSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobotDSLPackage.MISSION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Flag> getFlagsList()
  {
    if (flagsList == null)
    {
      flagsList = new EObjectContainmentEList<Flag>(Flag.class, this, RobotDSLPackage.MISSION__FLAGS_LIST);
    }
    return flagsList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Task> getBehaviorList()
  {
    if (behaviorList == null)
    {
      behaviorList = new EObjectContainmentEList<Task>(Task.class, this, RobotDSLPackage.MISSION__BEHAVIOR_LIST);
    }
    return behaviorList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Trigger> getGoalEvents()
  {
    if (goalEvents == null)
    {
      goalEvents = new EObjectContainmentEList<Trigger>(Trigger.class, this, RobotDSLPackage.MISSION__GOAL_EVENTS);
    }
    return goalEvents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Time getTimeout()
  {
    return timeout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTimeout(Time newTimeout, NotificationChain msgs)
  {
    Time oldTimeout = timeout;
    timeout = newTimeout;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RobotDSLPackage.MISSION__TIMEOUT, oldTimeout, newTimeout);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTimeout(Time newTimeout)
  {
    if (newTimeout != timeout)
    {
      NotificationChain msgs = null;
      if (timeout != null)
        msgs = ((InternalEObject)timeout).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RobotDSLPackage.MISSION__TIMEOUT, null, msgs);
      if (newTimeout != null)
        msgs = ((InternalEObject)newTimeout).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RobotDSLPackage.MISSION__TIMEOUT, null, msgs);
      msgs = basicSetTimeout(newTimeout, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobotDSLPackage.MISSION__TIMEOUT, newTimeout, newTimeout));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Action> getFinishActions()
  {
    if (finishActions == null)
    {
      finishActions = new EObjectContainmentEList<Action>(Action.class, this, RobotDSLPackage.MISSION__FINISH_ACTIONS);
    }
    return finishActions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RobotDSLPackage.MISSION__FLAGS_LIST:
        return ((InternalEList<?>)getFlagsList()).basicRemove(otherEnd, msgs);
      case RobotDSLPackage.MISSION__BEHAVIOR_LIST:
        return ((InternalEList<?>)getBehaviorList()).basicRemove(otherEnd, msgs);
      case RobotDSLPackage.MISSION__GOAL_EVENTS:
        return ((InternalEList<?>)getGoalEvents()).basicRemove(otherEnd, msgs);
      case RobotDSLPackage.MISSION__TIMEOUT:
        return basicSetTimeout(null, msgs);
      case RobotDSLPackage.MISSION__FINISH_ACTIONS:
        return ((InternalEList<?>)getFinishActions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RobotDSLPackage.MISSION__NAME:
        return getName();
      case RobotDSLPackage.MISSION__FLAGS_LIST:
        return getFlagsList();
      case RobotDSLPackage.MISSION__BEHAVIOR_LIST:
        return getBehaviorList();
      case RobotDSLPackage.MISSION__GOAL_EVENTS:
        return getGoalEvents();
      case RobotDSLPackage.MISSION__TIMEOUT:
        return getTimeout();
      case RobotDSLPackage.MISSION__FINISH_ACTIONS:
        return getFinishActions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RobotDSLPackage.MISSION__NAME:
        setName((String)newValue);
        return;
      case RobotDSLPackage.MISSION__FLAGS_LIST:
        getFlagsList().clear();
        getFlagsList().addAll((Collection<? extends Flag>)newValue);
        return;
      case RobotDSLPackage.MISSION__BEHAVIOR_LIST:
        getBehaviorList().clear();
        getBehaviorList().addAll((Collection<? extends Task>)newValue);
        return;
      case RobotDSLPackage.MISSION__GOAL_EVENTS:
        getGoalEvents().clear();
        getGoalEvents().addAll((Collection<? extends Trigger>)newValue);
        return;
      case RobotDSLPackage.MISSION__TIMEOUT:
        setTimeout((Time)newValue);
        return;
      case RobotDSLPackage.MISSION__FINISH_ACTIONS:
        getFinishActions().clear();
        getFinishActions().addAll((Collection<? extends Action>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RobotDSLPackage.MISSION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case RobotDSLPackage.MISSION__FLAGS_LIST:
        getFlagsList().clear();
        return;
      case RobotDSLPackage.MISSION__BEHAVIOR_LIST:
        getBehaviorList().clear();
        return;
      case RobotDSLPackage.MISSION__GOAL_EVENTS:
        getGoalEvents().clear();
        return;
      case RobotDSLPackage.MISSION__TIMEOUT:
        setTimeout((Time)null);
        return;
      case RobotDSLPackage.MISSION__FINISH_ACTIONS:
        getFinishActions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RobotDSLPackage.MISSION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case RobotDSLPackage.MISSION__FLAGS_LIST:
        return flagsList != null && !flagsList.isEmpty();
      case RobotDSLPackage.MISSION__BEHAVIOR_LIST:
        return behaviorList != null && !behaviorList.isEmpty();
      case RobotDSLPackage.MISSION__GOAL_EVENTS:
        return goalEvents != null && !goalEvents.isEmpty();
      case RobotDSLPackage.MISSION__TIMEOUT:
        return timeout != null;
      case RobotDSLPackage.MISSION__FINISH_ACTIONS:
        return finishActions != null && !finishActions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //MissionImpl
