/**
 * generated by Xtext 2.10.0
 */
package des.missionrobot.robotDSL.impl;

import des.missionrobot.robotDSL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RobotDSLFactoryImpl extends EFactoryImpl implements RobotDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RobotDSLFactory init()
  {
    try
    {
      RobotDSLFactory theRobotDSLFactory = (RobotDSLFactory)EPackage.Registry.INSTANCE.getEFactory(RobotDSLPackage.eNS_URI);
      if (theRobotDSLFactory != null)
      {
        return theRobotDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RobotDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RobotDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RobotDSLPackage.BEHAVIOUR: return createBehaviour();
      case RobotDSLPackage.MOVEMENT: return createMovement();
      case RobotDSLPackage.MOVE_FORWARD: return createMoveForward();
      case RobotDSLPackage.MOVE_BACKWARD: return createMoveBackward();
      case RobotDSLPackage.TURN: return createTurn();
      case RobotDSLPackage.STOP: return createStop();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Behaviour createBehaviour()
  {
    BehaviourImpl behaviour = new BehaviourImpl();
    return behaviour;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Movement createMovement()
  {
    MovementImpl movement = new MovementImpl();
    return movement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MoveForward createMoveForward()
  {
    MoveForwardImpl moveForward = new MoveForwardImpl();
    return moveForward;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MoveBackward createMoveBackward()
  {
    MoveBackwardImpl moveBackward = new MoveBackwardImpl();
    return moveBackward;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Turn createTurn()
  {
    TurnImpl turn = new TurnImpl();
    return turn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Stop createStop()
  {
    StopImpl stop = new StopImpl();
    return stop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RobotDSLPackage getRobotDSLPackage()
  {
    return (RobotDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RobotDSLPackage getPackage()
  {
    return RobotDSLPackage.eINSTANCE;
  }

} //RobotDSLFactoryImpl
