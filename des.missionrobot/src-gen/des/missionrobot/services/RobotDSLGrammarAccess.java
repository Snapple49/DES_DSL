/*
 * generated by Xtext 2.10.0
 */
package des.missionrobot.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RobotDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MissionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Missions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMissionsetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cMissionsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMissionListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMissionListMissionParserRuleCall_3_0 = (RuleCall)cMissionListAssignment_3.eContents().get(0);
		
		//Missions:
		//	'Missionset' name=ID
		//	'Missions:' missionList+=Mission+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Missionset' name=ID 'Missions:' missionList+=Mission+
		public Group getGroup() { return cGroup; }
		
		//'Missionset'
		public Keyword getMissionsetKeyword_0() { return cMissionsetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'Missions:'
		public Keyword getMissionsKeyword_2() { return cMissionsKeyword_2; }
		
		//missionList+=Mission+
		public Assignment getMissionListAssignment_3() { return cMissionListAssignment_3; }
		
		//Mission
		public RuleCall getMissionListMissionParserRuleCall_3_0() { return cMissionListMissionParserRuleCall_3_0; }
	}
	public class MissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Mission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMissionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFlagsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFlagsListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFlagsListFlagParserRuleCall_3_0 = (RuleCall)cFlagsListAssignment_3.eContents().get(0);
		private final Keyword cTasksKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTaskListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTaskListTaskParserRuleCall_5_0 = (RuleCall)cTaskListAssignment_5.eContents().get(0);
		private final Keyword cGoalKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cGoalAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cGoalGoalParserRuleCall_7_0 = (RuleCall)cGoalAssignment_7.eContents().get(0);
		
		//Mission:
		//	'Mission' name=ID
		//	'Flags:' flagsList+=Flag*
		//	'Tasks:' taskList+=Task+
		//	'Goal:' goal=Goal;
		@Override public ParserRule getRule() { return rule; }
		
		//'Mission' name=ID 'Flags:' flagsList+=Flag* 'Tasks:' taskList+=Task+ 'Goal:' goal=Goal
		public Group getGroup() { return cGroup; }
		
		//'Mission'
		public Keyword getMissionKeyword_0() { return cMissionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'Flags:'
		public Keyword getFlagsKeyword_2() { return cFlagsKeyword_2; }
		
		//flagsList+=Flag*
		public Assignment getFlagsListAssignment_3() { return cFlagsListAssignment_3; }
		
		//Flag
		public RuleCall getFlagsListFlagParserRuleCall_3_0() { return cFlagsListFlagParserRuleCall_3_0; }
		
		//'Tasks:'
		public Keyword getTasksKeyword_4() { return cTasksKeyword_4; }
		
		//taskList+=Task+
		public Assignment getTaskListAssignment_5() { return cTaskListAssignment_5; }
		
		//Task
		public RuleCall getTaskListTaskParserRuleCall_5_0() { return cTaskListTaskParserRuleCall_5_0; }
		
		//'Goal:'
		public Keyword getGoalKeyword_6() { return cGoalKeyword_6; }
		
		//goal=Goal
		public Assignment getGoalAssignment_7() { return cGoalAssignment_7; }
		
		//Goal
		public RuleCall getGoalGoalParserRuleCall_7_0() { return cGoalGoalParserRuleCall_7_0; }
	}
	public class GoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Goal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cConditionKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cGoalEventsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cGoalEventsTriggerParserRuleCall_0_1_0 = (RuleCall)cGoalEventsAssignment_0_1.eContents().get(0);
		private final Assignment cTimeoutAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeoutTimeParserRuleCall_1_0 = (RuleCall)cTimeoutAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cActionsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFinishActionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFinishActionsActionParserRuleCall_2_1_0 = (RuleCall)cFinishActionsAssignment_2_1.eContents().get(0);
		
		//Goal:
		//	('Condition:' goalEvents+=Trigger+)? timeout=Time? ('Actions:' finishActions+=Action+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('Condition:' goalEvents+=Trigger+)? timeout=Time? ('Actions:' finishActions+=Action+)?
		public Group getGroup() { return cGroup; }
		
		//('Condition:' goalEvents+=Trigger+)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'Condition:'
		public Keyword getConditionKeyword_0_0() { return cConditionKeyword_0_0; }
		
		//goalEvents+=Trigger+
		public Assignment getGoalEventsAssignment_0_1() { return cGoalEventsAssignment_0_1; }
		
		//Trigger
		public RuleCall getGoalEventsTriggerParserRuleCall_0_1_0() { return cGoalEventsTriggerParserRuleCall_0_1_0; }
		
		//timeout=Time?
		public Assignment getTimeoutAssignment_1() { return cTimeoutAssignment_1; }
		
		//Time
		public RuleCall getTimeoutTimeParserRuleCall_1_0() { return cTimeoutTimeParserRuleCall_1_0; }
		
		//('Actions:' finishActions+=Action+)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Actions:'
		public Keyword getActionsKeyword_2_0() { return cActionsKeyword_2_0; }
		
		//finishActions+=Action+
		public Assignment getFinishActionsAssignment_2_1() { return cFinishActionsAssignment_2_1; }
		
		//Action
		public RuleCall getFinishActionsActionParserRuleCall_2_1_0() { return cFinishActionsActionParserRuleCall_2_1_0; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPriorityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPrioAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPrioINTTerminalRuleCall_3_0 = (RuleCall)cPrioAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTriggersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTriggerListAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTriggerListTriggerParserRuleCall_4_1_0 = (RuleCall)cTriggerListAssignment_4_1.eContents().get(0);
		private final Keyword cActionsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cActionListAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActionListActionParserRuleCall_6_0 = (RuleCall)cActionListAssignment_6.eContents().get(0);
		
		//Task:
		//	'Task:' name=ID
		//	'priority:' prio=INT ('Triggers:' triggerList+=Trigger+)?
		//	'Actions:' actionList+=Action+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Task:' name=ID 'priority:' prio=INT ('Triggers:' triggerList+=Trigger+)? 'Actions:' actionList+=Action+
		public Group getGroup() { return cGroup; }
		
		//'Task:'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'priority:'
		public Keyword getPriorityKeyword_2() { return cPriorityKeyword_2; }
		
		//prio=INT
		public Assignment getPrioAssignment_3() { return cPrioAssignment_3; }
		
		//INT
		public RuleCall getPrioINTTerminalRuleCall_3_0() { return cPrioINTTerminalRuleCall_3_0; }
		
		//('Triggers:' triggerList+=Trigger+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'Triggers:'
		public Keyword getTriggersKeyword_4_0() { return cTriggersKeyword_4_0; }
		
		//triggerList+=Trigger+
		public Assignment getTriggerListAssignment_4_1() { return cTriggerListAssignment_4_1; }
		
		//Trigger
		public RuleCall getTriggerListTriggerParserRuleCall_4_1_0() { return cTriggerListTriggerParserRuleCall_4_1_0; }
		
		//'Actions:'
		public Keyword getActionsKeyword_5() { return cActionsKeyword_5; }
		
		//actionList+=Action+
		public Assignment getActionListAssignment_6() { return cActionListAssignment_6; }
		
		//Action
		public RuleCall getActionListActionParserRuleCall_6_0() { return cActionListActionParserRuleCall_6_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cMoveKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cMoveDirAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMoveDirDirectionParserRuleCall_0_1_0 = (RuleCall)cMoveDirAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cForKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cDurationAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cDurationINTTerminalRuleCall_0_2_1_0 = (RuleCall)cDurationAssignment_0_2_1.eContents().get(0);
		private final Keyword cMillisecKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cAtKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cSpeedAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cSpeedSpeedParserRuleCall_0_3_1_0 = (RuleCall)cSpeedAssignment_0_3_1.eContents().get(0);
		private final Keyword cSpeedKeyword_0_3_2 = (Keyword)cGroup_0_3.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTurnKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTurnDirAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTurnDirDirectionParserRuleCall_1_1_0 = (RuleCall)cTurnDirAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cAlternatives_1_2.eContents().get(0);
		private final Assignment cDegrAssignment_1_2_0_0 = (Assignment)cGroup_1_2_0.eContents().get(0);
		private final RuleCall cDegrINTTerminalRuleCall_1_2_0_0_0 = (RuleCall)cDegrAssignment_1_2_0_0.eContents().get(0);
		private final Keyword cDegKeyword_1_2_0_1 = (Keyword)cGroup_1_2_0.eContents().get(1);
		private final Group cGroup_1_2_1 = (Group)cAlternatives_1_2.eContents().get(1);
		private final Keyword cUntilKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cTrigAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cTrigTriggerParserRuleCall_1_2_1_1_0 = (RuleCall)cTrigAssignment_1_2_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cArmKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOpArmOpParserRuleCall_2_1_0 = (RuleCall)cOpAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cPlayKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cSoundKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cSoundAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cSoundSoundParserRuleCall_3_2_0 = (RuleCall)cSoundAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cUpdateKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFlagAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cFlagFlagCrossReference_4_1_0 = (CrossReference)cFlagAssignment_4_1.eContents().get(0);
		private final RuleCall cFlagFlagIDTerminalRuleCall_4_1_0_1 = (RuleCall)cFlagFlagCrossReference_4_1_0.eContents().get(1);
		private final Keyword cToKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cBoolAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cBoolBoolParserRuleCall_4_3_0 = (RuleCall)cBoolAssignment_4_3.eContents().get(0);
		private final Assignment cCentAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cCentCentalizeKeyword_5_0 = (Keyword)cCentAssignment_5.eContents().get(0);
		
		//Action:
		//	'Move' moveDir=Direction ('for' duration=INT 'millisec')? ('at' speed=Speed 'speed')? |
		//	'Turn' turnDir=Direction (degr=INT 'deg' | 'until' trig+=Trigger+) |
		//	'Arm' op=ArmOp |
		//	'Play' 'sound' sound=Sound |
		//	'Update' flag=[Flag] 'to' bool=Bool | cent='Centalize';
		@Override public ParserRule getRule() { return rule; }
		
		//'Move' moveDir=Direction ('for' duration=INT 'millisec')? ('at' speed=Speed 'speed')? | 'Turn' turnDir=Direction
		//(degr=INT 'deg' | 'until' trig+=Trigger+) | 'Arm' op=ArmOp | 'Play' 'sound' sound=Sound | 'Update' flag=[Flag] 'to'
		//bool=Bool | cent='Centalize'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Move' moveDir=Direction ('for' duration=INT 'millisec')? ('at' speed=Speed 'speed')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'Move'
		public Keyword getMoveKeyword_0_0() { return cMoveKeyword_0_0; }
		
		//moveDir=Direction
		public Assignment getMoveDirAssignment_0_1() { return cMoveDirAssignment_0_1; }
		
		//Direction
		public RuleCall getMoveDirDirectionParserRuleCall_0_1_0() { return cMoveDirDirectionParserRuleCall_0_1_0; }
		
		//('for' duration=INT 'millisec')?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'for'
		public Keyword getForKeyword_0_2_0() { return cForKeyword_0_2_0; }
		
		//duration=INT
		public Assignment getDurationAssignment_0_2_1() { return cDurationAssignment_0_2_1; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_0_2_1_0() { return cDurationINTTerminalRuleCall_0_2_1_0; }
		
		//'millisec'
		public Keyword getMillisecKeyword_0_2_2() { return cMillisecKeyword_0_2_2; }
		
		//('at' speed=Speed 'speed')?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'at'
		public Keyword getAtKeyword_0_3_0() { return cAtKeyword_0_3_0; }
		
		//speed=Speed
		public Assignment getSpeedAssignment_0_3_1() { return cSpeedAssignment_0_3_1; }
		
		//Speed
		public RuleCall getSpeedSpeedParserRuleCall_0_3_1_0() { return cSpeedSpeedParserRuleCall_0_3_1_0; }
		
		//'speed'
		public Keyword getSpeedKeyword_0_3_2() { return cSpeedKeyword_0_3_2; }
		
		//'Turn' turnDir=Direction (degr=INT 'deg' | 'until' trig+=Trigger+)
		public Group getGroup_1() { return cGroup_1; }
		
		//'Turn'
		public Keyword getTurnKeyword_1_0() { return cTurnKeyword_1_0; }
		
		//turnDir=Direction
		public Assignment getTurnDirAssignment_1_1() { return cTurnDirAssignment_1_1; }
		
		//Direction
		public RuleCall getTurnDirDirectionParserRuleCall_1_1_0() { return cTurnDirDirectionParserRuleCall_1_1_0; }
		
		//(degr=INT 'deg' | 'until' trig+=Trigger+)
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//degr=INT 'deg'
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }
		
		//degr=INT
		public Assignment getDegrAssignment_1_2_0_0() { return cDegrAssignment_1_2_0_0; }
		
		//INT
		public RuleCall getDegrINTTerminalRuleCall_1_2_0_0_0() { return cDegrINTTerminalRuleCall_1_2_0_0_0; }
		
		//'deg'
		public Keyword getDegKeyword_1_2_0_1() { return cDegKeyword_1_2_0_1; }
		
		//'until' trig+=Trigger+
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//'until'
		public Keyword getUntilKeyword_1_2_1_0() { return cUntilKeyword_1_2_1_0; }
		
		//trig+=Trigger+
		public Assignment getTrigAssignment_1_2_1_1() { return cTrigAssignment_1_2_1_1; }
		
		//Trigger
		public RuleCall getTrigTriggerParserRuleCall_1_2_1_1_0() { return cTrigTriggerParserRuleCall_1_2_1_1_0; }
		
		//'Arm' op=ArmOp
		public Group getGroup_2() { return cGroup_2; }
		
		//'Arm'
		public Keyword getArmKeyword_2_0() { return cArmKeyword_2_0; }
		
		//op=ArmOp
		public Assignment getOpAssignment_2_1() { return cOpAssignment_2_1; }
		
		//ArmOp
		public RuleCall getOpArmOpParserRuleCall_2_1_0() { return cOpArmOpParserRuleCall_2_1_0; }
		
		//'Play' 'sound' sound=Sound
		public Group getGroup_3() { return cGroup_3; }
		
		//'Play'
		public Keyword getPlayKeyword_3_0() { return cPlayKeyword_3_0; }
		
		//'sound'
		public Keyword getSoundKeyword_3_1() { return cSoundKeyword_3_1; }
		
		//sound=Sound
		public Assignment getSoundAssignment_3_2() { return cSoundAssignment_3_2; }
		
		//Sound
		public RuleCall getSoundSoundParserRuleCall_3_2_0() { return cSoundSoundParserRuleCall_3_2_0; }
		
		//'Update' flag=[Flag] 'to' bool=Bool
		public Group getGroup_4() { return cGroup_4; }
		
		//'Update'
		public Keyword getUpdateKeyword_4_0() { return cUpdateKeyword_4_0; }
		
		//flag=[Flag]
		public Assignment getFlagAssignment_4_1() { return cFlagAssignment_4_1; }
		
		//[Flag]
		public CrossReference getFlagFlagCrossReference_4_1_0() { return cFlagFlagCrossReference_4_1_0; }
		
		//ID
		public RuleCall getFlagFlagIDTerminalRuleCall_4_1_0_1() { return cFlagFlagIDTerminalRuleCall_4_1_0_1; }
		
		//'to'
		public Keyword getToKeyword_4_2() { return cToKeyword_4_2; }
		
		//bool=Bool
		public Assignment getBoolAssignment_4_3() { return cBoolAssignment_4_3; }
		
		//Bool
		public RuleCall getBoolBoolParserRuleCall_4_3_0() { return cBoolBoolParserRuleCall_4_3_0; }
		
		//cent='Centalize'
		public Assignment getCentAssignment_5() { return cCentAssignment_5; }
		
		//'Centalize'
		public Keyword getCentCentalizeKeyword_5_0() { return cCentCentalizeKeyword_5_0; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBoolTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBoolTypeBoolParserRuleCall_0_0 = (RuleCall)cBoolTypeAssignment_0.eContents().get(0);
		private final Assignment cNegAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNegNegationParserRuleCall_1_0 = (RuleCall)cNegAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFlagAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cFlagFlagCrossReference_2_0_0 = (CrossReference)cFlagAssignment_2_0.eContents().get(0);
		private final RuleCall cFlagFlagIDTerminalRuleCall_2_0_0_1 = (RuleCall)cFlagFlagCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cSensorAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cSensorSensorParserRuleCall_2_1_0_0 = (RuleCall)cSensorAssignment_2_1_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1 = (Alternatives)cGroup_2_1.eContents().get(1);
		private final Group cGroup_2_1_1_0 = (Group)cAlternatives_2_1_1.eContents().get(0);
		private final Keyword cIsKeyword_2_1_1_0_0 = (Keyword)cGroup_2_1_1_0.eContents().get(0);
		private final Assignment cColorAssignment_2_1_1_0_1 = (Assignment)cGroup_2_1_1_0.eContents().get(1);
		private final RuleCall cColorColorParserRuleCall_2_1_1_0_1_0 = (RuleCall)cColorAssignment_2_1_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_1_1 = (Group)cAlternatives_2_1_1.eContents().get(1);
		private final Keyword cDistanceKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Assignment cDistAssignment_2_1_1_1_1 = (Assignment)cGroup_2_1_1_1.eContents().get(1);
		private final RuleCall cDistDistanceParserRuleCall_2_1_1_1_1_0 = (RuleCall)cDistAssignment_2_1_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_1_2 = (Group)cAlternatives_2_1_1.eContents().get(2);
		private final Keyword cTouchingKeyword_2_1_1_2_0 = (Keyword)cGroup_2_1_1_2.eContents().get(0);
		private final Assignment cTouchingAssignment_2_1_1_2_1 = (Assignment)cGroup_2_1_1_2.eContents().get(1);
		private final RuleCall cTouchingBoolParserRuleCall_2_1_1_2_1_0 = (RuleCall)cTouchingAssignment_2_1_1_2_1.eContents().get(0);
		
		//Trigger:
		//	boolType=Bool?
		//	neg=Negation? (flag=[Flag] | sensor=Sensor ('is' color=Color | 'distance' dist=Distance | 'touching' touching=Bool));
		@Override public ParserRule getRule() { return rule; }
		
		//boolType=Bool? neg=Negation? (flag=[Flag] | sensor=Sensor ('is' color=Color | 'distance' dist=Distance | 'touching'
		//touching=Bool))
		public Group getGroup() { return cGroup; }
		
		//boolType=Bool?
		public Assignment getBoolTypeAssignment_0() { return cBoolTypeAssignment_0; }
		
		//Bool
		public RuleCall getBoolTypeBoolParserRuleCall_0_0() { return cBoolTypeBoolParserRuleCall_0_0; }
		
		//neg=Negation?
		public Assignment getNegAssignment_1() { return cNegAssignment_1; }
		
		//Negation
		public RuleCall getNegNegationParserRuleCall_1_0() { return cNegNegationParserRuleCall_1_0; }
		
		//(flag=[Flag] | sensor=Sensor ('is' color=Color | 'distance' dist=Distance | 'touching' touching=Bool))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//flag=[Flag]
		public Assignment getFlagAssignment_2_0() { return cFlagAssignment_2_0; }
		
		//[Flag]
		public CrossReference getFlagFlagCrossReference_2_0_0() { return cFlagFlagCrossReference_2_0_0; }
		
		//ID
		public RuleCall getFlagFlagIDTerminalRuleCall_2_0_0_1() { return cFlagFlagIDTerminalRuleCall_2_0_0_1; }
		
		//sensor=Sensor ('is' color=Color | 'distance' dist=Distance | 'touching' touching=Bool)
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//sensor=Sensor
		public Assignment getSensorAssignment_2_1_0() { return cSensorAssignment_2_1_0; }
		
		//Sensor
		public RuleCall getSensorSensorParserRuleCall_2_1_0_0() { return cSensorSensorParserRuleCall_2_1_0_0; }
		
		//('is' color=Color | 'distance' dist=Distance | 'touching' touching=Bool)
		public Alternatives getAlternatives_2_1_1() { return cAlternatives_2_1_1; }
		
		//'is' color=Color
		public Group getGroup_2_1_1_0() { return cGroup_2_1_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2_1_1_0_0() { return cIsKeyword_2_1_1_0_0; }
		
		//color=Color
		public Assignment getColorAssignment_2_1_1_0_1() { return cColorAssignment_2_1_1_0_1; }
		
		//Color
		public RuleCall getColorColorParserRuleCall_2_1_1_0_1_0() { return cColorColorParserRuleCall_2_1_1_0_1_0; }
		
		//'distance' dist=Distance
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2_1_1_1_0() { return cDistanceKeyword_2_1_1_1_0; }
		
		//dist=Distance
		public Assignment getDistAssignment_2_1_1_1_1() { return cDistAssignment_2_1_1_1_1; }
		
		//Distance
		public RuleCall getDistDistanceParserRuleCall_2_1_1_1_1_0() { return cDistDistanceParserRuleCall_2_1_1_1_1_0; }
		
		//'touching' touching=Bool
		public Group getGroup_2_1_1_2() { return cGroup_2_1_1_2; }
		
		//'touching'
		public Keyword getTouchingKeyword_2_1_1_2_0() { return cTouchingKeyword_2_1_1_2_0; }
		
		//touching=Bool
		public Assignment getTouchingAssignment_2_1_1_2_1() { return cTouchingAssignment_2_1_1_2_1; }
		
		//Bool
		public RuleCall getTouchingBoolParserRuleCall_2_1_1_2_1_0() { return cTouchingBoolParserRuleCall_2_1_1_2_1_0; }
	}
	public class DistanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Distance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRangeBoolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRangeBoolBoolParserRuleCall_0_0 = (RuleCall)cRangeBoolAssignment_0.eContents().get(0);
		private final Keyword cThanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceINTTerminalRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		private final Keyword cCmKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Distance:
		//	rangeBool=Bool 'than' distance=INT 'cm';
		@Override public ParserRule getRule() { return rule; }
		
		//rangeBool=Bool 'than' distance=INT 'cm'
		public Group getGroup() { return cGroup; }
		
		//rangeBool=Bool
		public Assignment getRangeBoolAssignment_0() { return cRangeBoolAssignment_0; }
		
		//Bool
		public RuleCall getRangeBoolBoolParserRuleCall_0_0() { return cRangeBoolBoolParserRuleCall_0_0; }
		
		//'than'
		public Keyword getThanKeyword_1() { return cThanKeyword_1; }
		
		//distance=INT
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//INT
		public RuleCall getDistanceINTTerminalRuleCall_2_0() { return cDistanceINTTerminalRuleCall_2_0; }
		
		//'cm'
		public Keyword getCmKeyword_3() { return cCmKeyword_3; }
	}
	public class FlagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Flag");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Flag:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Time");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSecINTTerminalRuleCall_1_0 = (RuleCall)cSecAssignment_1.eContents().get(0);
		private final Keyword cSecKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Time:
		//	'Time:' sec=INT 'sec';
		@Override public ParserRule getRule() { return rule; }
		
		//'Time:' sec=INT 'sec'
		public Group getGroup() { return cGroup; }
		
		//'Time:'
		public Keyword getTimeKeyword_0() { return cTimeKeyword_0; }
		
		//sec=INT
		public Assignment getSecAssignment_1() { return cSecAssignment_1; }
		
		//INT
		public RuleCall getSecINTTerminalRuleCall_1_0() { return cSecINTTerminalRuleCall_1_0; }
		
		//'sec'
		public Keyword getSecKeyword_2() { return cSecKeyword_2; }
	}
	public class DirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Direction");
		private final Assignment cDirAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDirDirectionValEnumRuleCall_0 = (RuleCall)cDirAssignment.eContents().get(0);
		
		//Direction:
		//	dir=DirectionVal;
		@Override public ParserRule getRule() { return rule; }
		
		//dir=DirectionVal
		public Assignment getDirAssignment() { return cDirAssignment; }
		
		//DirectionVal
		public RuleCall getDirDirectionValEnumRuleCall_0() { return cDirDirectionValEnumRuleCall_0; }
	}
	public class SpeedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Speed");
		private final Assignment cSpeedAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSpeedSpeedValEnumRuleCall_0 = (RuleCall)cSpeedAssignment.eContents().get(0);
		
		//Speed:
		//	speed=SpeedVal;
		@Override public ParserRule getRule() { return rule; }
		
		//speed=SpeedVal
		public Assignment getSpeedAssignment() { return cSpeedAssignment; }
		
		//SpeedVal
		public RuleCall getSpeedSpeedValEnumRuleCall_0() { return cSpeedSpeedValEnumRuleCall_0; }
	}
	public class ArmOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.ArmOp");
		private final Assignment cOpTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOpTypeArmOpTypeEnumRuleCall_0 = (RuleCall)cOpTypeAssignment.eContents().get(0);
		
		//ArmOp:
		//	opType=ArmOpType;
		@Override public ParserRule getRule() { return rule; }
		
		//opType=ArmOpType
		public Assignment getOpTypeAssignment() { return cOpTypeAssignment; }
		
		//ArmOpType
		public RuleCall getOpTypeArmOpTypeEnumRuleCall_0() { return cOpTypeArmOpTypeEnumRuleCall_0; }
	}
	public class SoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Sound");
		private final Assignment cSoundNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSoundNameSoundNameEnumRuleCall_0 = (RuleCall)cSoundNameAssignment.eContents().get(0);
		
		//Sound:
		//	soundName=SoundName;
		@Override public ParserRule getRule() { return rule; }
		
		//soundName=SoundName
		public Assignment getSoundNameAssignment() { return cSoundNameAssignment; }
		
		//SoundName
		public RuleCall getSoundNameSoundNameEnumRuleCall_0() { return cSoundNameSoundNameEnumRuleCall_0; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Sensor");
		private final Assignment cSensorTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSensorTypeSensorTypeEnumRuleCall_0 = (RuleCall)cSensorTypeAssignment.eContents().get(0);
		
		//Sensor:
		//	sensorType=SensorType;
		@Override public ParserRule getRule() { return rule; }
		
		//sensorType=SensorType
		public Assignment getSensorTypeAssignment() { return cSensorTypeAssignment; }
		
		//SensorType
		public RuleCall getSensorTypeSensorTypeEnumRuleCall_0() { return cSensorTypeSensorTypeEnumRuleCall_0; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Color");
		private final Assignment cColorNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cColorNameColorNameEnumRuleCall_0 = (RuleCall)cColorNameAssignment.eContents().get(0);
		
		//Color:
		//	colorName=ColorName;
		@Override public ParserRule getRule() { return rule; }
		
		//colorName=ColorName
		public Assignment getColorNameAssignment() { return cColorNameAssignment; }
		
		//ColorName
		public RuleCall getColorNameColorNameEnumRuleCall_0() { return cColorNameColorNameEnumRuleCall_0; }
	}
	public class BoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Bool");
		private final Assignment cBoolTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBoolTypeBoolTypeEnumRuleCall_0 = (RuleCall)cBoolTypeAssignment.eContents().get(0);
		
		//Bool:
		//	boolType=BoolType;
		@Override public ParserRule getRule() { return rule; }
		
		//boolType=BoolType
		public Assignment getBoolTypeAssignment() { return cBoolTypeAssignment; }
		
		//BoolType
		public RuleCall getBoolTypeBoolTypeEnumRuleCall_0() { return cBoolTypeBoolTypeEnumRuleCall_0; }
	}
	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Negation");
		private final Assignment cNOTAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNOTNotKeyword_0 = (Keyword)cNOTAssignment.eContents().get(0);
		
		//Negation:
		//	NOT='not';
		@Override public ParserRule getRule() { return rule; }
		
		//NOT='not'
		public Assignment getNOTAssignment() { return cNOTAssignment; }
		
		//'not'
		public Keyword getNOTNotKeyword_0() { return cNOTNotKeyword_0; }
	}
	
	public class DirectionValElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.DirectionVal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFORWARDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFORWARDForwardKeyword_0_0 = (Keyword)cFORWARDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBACKWARDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBACKWARDBackwardKeyword_1_0 = (Keyword)cBACKWARDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLEFTLeftKeyword_2_0 = (Keyword)cLEFTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRIGHTRightKeyword_3_0 = (Keyword)cRIGHTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum DirectionVal:
		//	FORWARD='forward' |
		//	BACKWARD='backward' |
		//	LEFT='left' |
		//	RIGHT='right';
		public EnumRule getRule() { return rule; }
		
		//FORWARD='forward' | BACKWARD='backward' | LEFT='left' | RIGHT='right'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FORWARD='forward'
		public EnumLiteralDeclaration getFORWARDEnumLiteralDeclaration_0() { return cFORWARDEnumLiteralDeclaration_0; }
		
		//'forward'
		public Keyword getFORWARDForwardKeyword_0_0() { return cFORWARDForwardKeyword_0_0; }
		
		//BACKWARD='backward'
		public EnumLiteralDeclaration getBACKWARDEnumLiteralDeclaration_1() { return cBACKWARDEnumLiteralDeclaration_1; }
		
		//'backward'
		public Keyword getBACKWARDBackwardKeyword_1_0() { return cBACKWARDBackwardKeyword_1_0; }
		
		//LEFT='left'
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_2() { return cLEFTEnumLiteralDeclaration_2; }
		
		//'left'
		public Keyword getLEFTLeftKeyword_2_0() { return cLEFTLeftKeyword_2_0; }
		
		//RIGHT='right'
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_3() { return cRIGHTEnumLiteralDeclaration_3; }
		
		//'right'
		public Keyword getRIGHTRightKeyword_3_0() { return cRIGHTRightKeyword_3_0; }
	}
	public class SpeedValElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.SpeedVal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHIGHHighKeyword_0_0 = (Keyword)cHIGHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMEDMediumKeyword_1_0 = (Keyword)cMEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLOWLowKeyword_2_0 = (Keyword)cLOWEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SpeedVal:
		//	HIGH='high' |
		//	MED='medium' |
		//	LOW='low';
		public EnumRule getRule() { return rule; }
		
		//HIGH='high' | MED='medium' | LOW='low'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HIGH='high'
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_0() { return cHIGHEnumLiteralDeclaration_0; }
		
		//'high'
		public Keyword getHIGHHighKeyword_0_0() { return cHIGHHighKeyword_0_0; }
		
		//MED='medium'
		public EnumLiteralDeclaration getMEDEnumLiteralDeclaration_1() { return cMEDEnumLiteralDeclaration_1; }
		
		//'medium'
		public Keyword getMEDMediumKeyword_1_0() { return cMEDMediumKeyword_1_0; }
		
		//LOW='low'
		public EnumLiteralDeclaration getLOWEnumLiteralDeclaration_2() { return cLOWEnumLiteralDeclaration_2; }
		
		//'low'
		public Keyword getLOWLowKeyword_2_0() { return cLOWLowKeyword_2_0; }
	}
	public class ArmOpTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.ArmOpType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUPRaiseKeyword_0_0 = (Keyword)cUPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDOWNEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDOWNLowerKeyword_1_0 = (Keyword)cDOWNEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ArmOpType:
		//	UP='raise' |
		//	DOWN='lower';
		public EnumRule getRule() { return rule; }
		
		//UP='raise' | DOWN='lower'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UP='raise'
		public EnumLiteralDeclaration getUPEnumLiteralDeclaration_0() { return cUPEnumLiteralDeclaration_0; }
		
		//'raise'
		public Keyword getUPRaiseKeyword_0_0() { return cUPRaiseKeyword_0_0; }
		
		//DOWN='lower'
		public EnumLiteralDeclaration getDOWNEnumLiteralDeclaration_1() { return cDOWNEnumLiteralDeclaration_1; }
		
		//'lower'
		public Keyword getDOWNLowerKeyword_1_0() { return cDOWNLowerKeyword_1_0; }
	}
	public class SoundNameElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.SoundName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBUZZEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBUZZBuzzKeyword_0_0 = (Keyword)cBUZZEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFANFAREEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFANFAREFanfareKeyword_1_0 = (Keyword)cFANFAREEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SoundName:
		//	BUZZ='buzz' |
		//	FANFARE='fanfare';
		public EnumRule getRule() { return rule; }
		
		//BUZZ='buzz' | FANFARE='fanfare'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BUZZ='buzz'
		public EnumLiteralDeclaration getBUZZEnumLiteralDeclaration_0() { return cBUZZEnumLiteralDeclaration_0; }
		
		//'buzz'
		public Keyword getBUZZBuzzKeyword_0_0() { return cBUZZBuzzKeyword_0_0; }
		
		//FANFARE='fanfare'
		public EnumLiteralDeclaration getFANFAREEnumLiteralDeclaration_1() { return cFANFAREEnumLiteralDeclaration_1; }
		
		//'fanfare'
		public Keyword getFANFAREFanfareKeyword_1_0() { return cFANFAREFanfareKeyword_1_0; }
	}
	public class SensorTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.SensorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCOLOREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCOLORColorKeyword_0_0 = (Keyword)cCOLOREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEFTLIGHTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLEFTLIGHTLeftLightKeyword_1_0 = (Keyword)cLEFTLIGHTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTLIGHTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRIGHTLIGHTRightLightKeyword_2_0 = (Keyword)cRIGHTLIGHTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBACKUSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBACKUSRearHeightKeyword_3_0 = (Keyword)cBACKUSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFRONTUSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFRONTUSFrontDistanceKeyword_4_0 = (Keyword)cFRONTUSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLEFTTOUCHEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLEFTTOUCHLeftTouchKeyword_5_0 = (Keyword)cLEFTTOUCHEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTTOUCHEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cRIGHTTOUCHRightTouchKeyword_6_0 = (Keyword)cRIGHTTOUCHEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cGYROEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cGYROGyroKeyword_7_0 = (Keyword)cGYROEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum SensorType:
		//	COLOR='Color' |
		//	LEFTLIGHT='LeftLight' |
		//	RIGHTLIGHT='RightLight' |
		//	BACKUS='RearHeight' |
		//	FRONTUS='FrontDistance' |
		//	LEFTTOUCH='LeftTouch' |
		//	RIGHTTOUCH='RightTouch' |
		//	GYRO='Gyro';
		public EnumRule getRule() { return rule; }
		
		//COLOR='Color' | LEFTLIGHT='LeftLight' | RIGHTLIGHT='RightLight' | BACKUS='RearHeight' | FRONTUS='FrontDistance' |
		//LEFTTOUCH='LeftTouch' | RIGHTTOUCH='RightTouch' | GYRO='Gyro'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//COLOR='Color'
		public EnumLiteralDeclaration getCOLOREnumLiteralDeclaration_0() { return cCOLOREnumLiteralDeclaration_0; }
		
		//'Color'
		public Keyword getCOLORColorKeyword_0_0() { return cCOLORColorKeyword_0_0; }
		
		//LEFTLIGHT='LeftLight'
		public EnumLiteralDeclaration getLEFTLIGHTEnumLiteralDeclaration_1() { return cLEFTLIGHTEnumLiteralDeclaration_1; }
		
		//'LeftLight'
		public Keyword getLEFTLIGHTLeftLightKeyword_1_0() { return cLEFTLIGHTLeftLightKeyword_1_0; }
		
		//RIGHTLIGHT='RightLight'
		public EnumLiteralDeclaration getRIGHTLIGHTEnumLiteralDeclaration_2() { return cRIGHTLIGHTEnumLiteralDeclaration_2; }
		
		//'RightLight'
		public Keyword getRIGHTLIGHTRightLightKeyword_2_0() { return cRIGHTLIGHTRightLightKeyword_2_0; }
		
		//BACKUS='RearHeight'
		public EnumLiteralDeclaration getBACKUSEnumLiteralDeclaration_3() { return cBACKUSEnumLiteralDeclaration_3; }
		
		//'RearHeight'
		public Keyword getBACKUSRearHeightKeyword_3_0() { return cBACKUSRearHeightKeyword_3_0; }
		
		//FRONTUS='FrontDistance'
		public EnumLiteralDeclaration getFRONTUSEnumLiteralDeclaration_4() { return cFRONTUSEnumLiteralDeclaration_4; }
		
		//'FrontDistance'
		public Keyword getFRONTUSFrontDistanceKeyword_4_0() { return cFRONTUSFrontDistanceKeyword_4_0; }
		
		//LEFTTOUCH='LeftTouch'
		public EnumLiteralDeclaration getLEFTTOUCHEnumLiteralDeclaration_5() { return cLEFTTOUCHEnumLiteralDeclaration_5; }
		
		//'LeftTouch'
		public Keyword getLEFTTOUCHLeftTouchKeyword_5_0() { return cLEFTTOUCHLeftTouchKeyword_5_0; }
		
		//RIGHTTOUCH='RightTouch'
		public EnumLiteralDeclaration getRIGHTTOUCHEnumLiteralDeclaration_6() { return cRIGHTTOUCHEnumLiteralDeclaration_6; }
		
		//'RightTouch'
		public Keyword getRIGHTTOUCHRightTouchKeyword_6_0() { return cRIGHTTOUCHRightTouchKeyword_6_0; }
		
		//GYRO='Gyro'
		public EnumLiteralDeclaration getGYROEnumLiteralDeclaration_7() { return cGYROEnumLiteralDeclaration_7; }
		
		//'Gyro'
		public Keyword getGYROGyroKeyword_7_0() { return cGYROGyroKeyword_7_0; }
	}
	public class ColorNameElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.ColorName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREDRedKeyword_0_0 = (Keyword)cREDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWHITEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWHITEWhiteKeyword_1_0 = (Keyword)cWHITEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBLACKEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBLACKBlackKeyword_2_0 = (Keyword)cBLACKEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREENGreenKeyword_3_0 = (Keyword)cGREENEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBLUEBlueKeyword_4_0 = (Keyword)cBLUEEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ColorName:
		//	RED='red' |
		//	WHITE='white' |
		//	BLACK='black' |
		//	GREEN='green' |
		//	BLUE='blue';
		public EnumRule getRule() { return rule; }
		
		//RED='red' | WHITE='white' | BLACK='black' | GREEN='green' | BLUE='blue'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RED='red'
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_0() { return cREDEnumLiteralDeclaration_0; }
		
		//'red'
		public Keyword getREDRedKeyword_0_0() { return cREDRedKeyword_0_0; }
		
		//WHITE='white'
		public EnumLiteralDeclaration getWHITEEnumLiteralDeclaration_1() { return cWHITEEnumLiteralDeclaration_1; }
		
		//'white'
		public Keyword getWHITEWhiteKeyword_1_0() { return cWHITEWhiteKeyword_1_0; }
		
		//BLACK='black'
		public EnumLiteralDeclaration getBLACKEnumLiteralDeclaration_2() { return cBLACKEnumLiteralDeclaration_2; }
		
		//'black'
		public Keyword getBLACKBlackKeyword_2_0() { return cBLACKBlackKeyword_2_0; }
		
		//GREEN='green'
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_3() { return cGREENEnumLiteralDeclaration_3; }
		
		//'green'
		public Keyword getGREENGreenKeyword_3_0() { return cGREENGreenKeyword_3_0; }
		
		//BLUE='blue'
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_4() { return cBLUEEnumLiteralDeclaration_4; }
		
		//'blue'
		public Keyword getBLUEBlueKeyword_4_0() { return cBLUEBlueKeyword_4_0; }
	}
	public class BoolTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.BoolType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLLessKeyword_0_0 = (Keyword)cLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGGreaterKeyword_1_0 = (Keyword)cGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cANDAndKeyword_2_0 = (Keyword)cANDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOROrKeyword_3_0 = (Keyword)cOREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTRUETrueKeyword_4_0 = (Keyword)cTRUEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFALSEFalseKeyword_5_0 = (Keyword)cFALSEEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum BoolType:
		//	L='less' |
		//	G='greater' |
		//	AND='and' |
		//	OR='or' |
		//	TRUE='true' |
		//	FALSE='false';
		public EnumRule getRule() { return rule; }
		
		//L='less' | G='greater' | AND='and' | OR='or' | TRUE='true' | FALSE='false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//L='less'
		public EnumLiteralDeclaration getLEnumLiteralDeclaration_0() { return cLEnumLiteralDeclaration_0; }
		
		//'less'
		public Keyword getLLessKeyword_0_0() { return cLLessKeyword_0_0; }
		
		//G='greater'
		public EnumLiteralDeclaration getGEnumLiteralDeclaration_1() { return cGEnumLiteralDeclaration_1; }
		
		//'greater'
		public Keyword getGGreaterKeyword_1_0() { return cGGreaterKeyword_1_0; }
		
		//AND='and'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_2() { return cANDEnumLiteralDeclaration_2; }
		
		//'and'
		public Keyword getANDAndKeyword_2_0() { return cANDAndKeyword_2_0; }
		
		//OR='or'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_3() { return cOREnumLiteralDeclaration_3; }
		
		//'or'
		public Keyword getOROrKeyword_3_0() { return cOROrKeyword_3_0; }
		
		//TRUE='true'
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_4() { return cTRUEEnumLiteralDeclaration_4; }
		
		//'true'
		public Keyword getTRUETrueKeyword_4_0() { return cTRUETrueKeyword_4_0; }
		
		//FALSE='false'
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_5() { return cFALSEEnumLiteralDeclaration_5; }
		
		//'false'
		public Keyword getFALSEFalseKeyword_5_0() { return cFALSEFalseKeyword_5_0; }
	}
	
	private final MissionsElements pMissions;
	private final MissionElements pMission;
	private final GoalElements pGoal;
	private final TaskElements pTask;
	private final ActionElements pAction;
	private final TriggerElements pTrigger;
	private final DistanceElements pDistance;
	private final FlagElements pFlag;
	private final TimeElements pTime;
	private final DirectionElements pDirection;
	private final DirectionValElements eDirectionVal;
	private final SpeedElements pSpeed;
	private final SpeedValElements eSpeedVal;
	private final ArmOpElements pArmOp;
	private final ArmOpTypeElements eArmOpType;
	private final SoundElements pSound;
	private final SoundNameElements eSoundName;
	private final SensorElements pSensor;
	private final SensorTypeElements eSensorType;
	private final ColorElements pColor;
	private final ColorNameElements eColorName;
	private final BoolElements pBool;
	private final BoolTypeElements eBoolType;
	private final NegationElements pNegation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RobotDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMissions = new MissionsElements();
		this.pMission = new MissionElements();
		this.pGoal = new GoalElements();
		this.pTask = new TaskElements();
		this.pAction = new ActionElements();
		this.pTrigger = new TriggerElements();
		this.pDistance = new DistanceElements();
		this.pFlag = new FlagElements();
		this.pTime = new TimeElements();
		this.pDirection = new DirectionElements();
		this.eDirectionVal = new DirectionValElements();
		this.pSpeed = new SpeedElements();
		this.eSpeedVal = new SpeedValElements();
		this.pArmOp = new ArmOpElements();
		this.eArmOpType = new ArmOpTypeElements();
		this.pSound = new SoundElements();
		this.eSoundName = new SoundNameElements();
		this.pSensor = new SensorElements();
		this.eSensorType = new SensorTypeElements();
		this.pColor = new ColorElements();
		this.eColorName = new ColorNameElements();
		this.pBool = new BoolElements();
		this.eBoolType = new BoolTypeElements();
		this.pNegation = new NegationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("des.missionrobot.RobotDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Missions:
	//	'Missionset' name=ID
	//	'Missions:' missionList+=Mission+;
	public MissionsElements getMissionsAccess() {
		return pMissions;
	}
	
	public ParserRule getMissionsRule() {
		return getMissionsAccess().getRule();
	}
	
	//Mission:
	//	'Mission' name=ID
	//	'Flags:' flagsList+=Flag*
	//	'Tasks:' taskList+=Task+
	//	'Goal:' goal=Goal;
	public MissionElements getMissionAccess() {
		return pMission;
	}
	
	public ParserRule getMissionRule() {
		return getMissionAccess().getRule();
	}
	
	//Goal:
	//	('Condition:' goalEvents+=Trigger+)? timeout=Time? ('Actions:' finishActions+=Action+)?;
	public GoalElements getGoalAccess() {
		return pGoal;
	}
	
	public ParserRule getGoalRule() {
		return getGoalAccess().getRule();
	}
	
	//Task:
	//	'Task:' name=ID
	//	'priority:' prio=INT ('Triggers:' triggerList+=Trigger+)?
	//	'Actions:' actionList+=Action+;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//Action:
	//	'Move' moveDir=Direction ('for' duration=INT 'millisec')? ('at' speed=Speed 'speed')? |
	//	'Turn' turnDir=Direction (degr=INT 'deg' | 'until' trig+=Trigger+) |
	//	'Arm' op=ArmOp |
	//	'Play' 'sound' sound=Sound |
	//	'Update' flag=[Flag] 'to' bool=Bool | cent='Centalize';
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Trigger:
	//	boolType=Bool?
	//	neg=Negation? (flag=[Flag] | sensor=Sensor ('is' color=Color | 'distance' dist=Distance | 'touching' touching=Bool));
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//Distance:
	//	rangeBool=Bool 'than' distance=INT 'cm';
	public DistanceElements getDistanceAccess() {
		return pDistance;
	}
	
	public ParserRule getDistanceRule() {
		return getDistanceAccess().getRule();
	}
	
	//Flag:
	//	name=ID;
	public FlagElements getFlagAccess() {
		return pFlag;
	}
	
	public ParserRule getFlagRule() {
		return getFlagAccess().getRule();
	}
	
	//Time:
	//	'Time:' sec=INT 'sec';
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//Direction:
	//	dir=DirectionVal;
	public DirectionElements getDirectionAccess() {
		return pDirection;
	}
	
	public ParserRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}
	
	//enum DirectionVal:
	//	FORWARD='forward' |
	//	BACKWARD='backward' |
	//	LEFT='left' |
	//	RIGHT='right';
	public DirectionValElements getDirectionValAccess() {
		return eDirectionVal;
	}
	
	public EnumRule getDirectionValRule() {
		return getDirectionValAccess().getRule();
	}
	
	//Speed:
	//	speed=SpeedVal;
	public SpeedElements getSpeedAccess() {
		return pSpeed;
	}
	
	public ParserRule getSpeedRule() {
		return getSpeedAccess().getRule();
	}
	
	//enum SpeedVal:
	//	HIGH='high' |
	//	MED='medium' |
	//	LOW='low';
	public SpeedValElements getSpeedValAccess() {
		return eSpeedVal;
	}
	
	public EnumRule getSpeedValRule() {
		return getSpeedValAccess().getRule();
	}
	
	//ArmOp:
	//	opType=ArmOpType;
	public ArmOpElements getArmOpAccess() {
		return pArmOp;
	}
	
	public ParserRule getArmOpRule() {
		return getArmOpAccess().getRule();
	}
	
	//enum ArmOpType:
	//	UP='raise' |
	//	DOWN='lower';
	public ArmOpTypeElements getArmOpTypeAccess() {
		return eArmOpType;
	}
	
	public EnumRule getArmOpTypeRule() {
		return getArmOpTypeAccess().getRule();
	}
	
	//Sound:
	//	soundName=SoundName;
	public SoundElements getSoundAccess() {
		return pSound;
	}
	
	public ParserRule getSoundRule() {
		return getSoundAccess().getRule();
	}
	
	//enum SoundName:
	//	BUZZ='buzz' |
	//	FANFARE='fanfare';
	public SoundNameElements getSoundNameAccess() {
		return eSoundName;
	}
	
	public EnumRule getSoundNameRule() {
		return getSoundNameAccess().getRule();
	}
	
	//Sensor:
	//	sensorType=SensorType;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//enum SensorType:
	//	COLOR='Color' |
	//	LEFTLIGHT='LeftLight' |
	//	RIGHTLIGHT='RightLight' |
	//	BACKUS='RearHeight' |
	//	FRONTUS='FrontDistance' |
	//	LEFTTOUCH='LeftTouch' |
	//	RIGHTTOUCH='RightTouch' |
	//	GYRO='Gyro';
	public SensorTypeElements getSensorTypeAccess() {
		return eSensorType;
	}
	
	public EnumRule getSensorTypeRule() {
		return getSensorTypeAccess().getRule();
	}
	
	//Color:
	//	colorName=ColorName;
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//enum ColorName:
	//	RED='red' |
	//	WHITE='white' |
	//	BLACK='black' |
	//	GREEN='green' |
	//	BLUE='blue';
	public ColorNameElements getColorNameAccess() {
		return eColorName;
	}
	
	public EnumRule getColorNameRule() {
		return getColorNameAccess().getRule();
	}
	
	//Bool:
	//	boolType=BoolType;
	public BoolElements getBoolAccess() {
		return pBool;
	}
	
	public ParserRule getBoolRule() {
		return getBoolAccess().getRule();
	}
	
	//enum BoolType:
	//	L='less' |
	//	G='greater' |
	//	AND='and' |
	//	OR='or' |
	//	TRUE='true' |
	//	FALSE='false';
	public BoolTypeElements getBoolTypeAccess() {
		return eBoolType;
	}
	
	public EnumRule getBoolTypeRule() {
		return getBoolTypeAccess().getRule();
	}
	
	//Negation:
	//	NOT='not';
	public NegationElements getNegationAccess() {
		return pNegation;
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
