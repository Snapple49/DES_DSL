/*
 * generated by Xtext 2.10.0
 */
package des.missionrobot.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RobotDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BehaviourElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Behaviour");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPriorityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPrioAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPrioINTTerminalRuleCall_3_0 = (RuleCall)cPrioAssignment_3.eContents().get(0);
		private final Keyword cMovementsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMovesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMovesMovementParserRuleCall_5_0 = (RuleCall)cMovesAssignment_5.eContents().get(0);
		
		//Behaviour:
		//	'Behavior' name=ID
		//	'priority' prio=INT
		//	'movements:' moves=Movement;
		@Override public ParserRule getRule() { return rule; }
		
		//'Behavior' name=ID 'priority' prio=INT 'movements:' moves=Movement
		public Group getGroup() { return cGroup; }
		
		//'Behavior'
		public Keyword getBehaviorKeyword_0() { return cBehaviorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'priority'
		public Keyword getPriorityKeyword_2() { return cPriorityKeyword_2; }
		
		//prio=INT
		public Assignment getPrioAssignment_3() { return cPrioAssignment_3; }
		
		//INT
		public RuleCall getPrioINTTerminalRuleCall_3_0() { return cPrioINTTerminalRuleCall_3_0; }
		
		//'movements:'
		public Keyword getMovementsKeyword_4() { return cMovementsKeyword_4; }
		
		//moves=Movement
		public Assignment getMovesAssignment_5() { return cMovesAssignment_5; }
		
		//Movement
		public RuleCall getMovesMovementParserRuleCall_5_0() { return cMovesMovementParserRuleCall_5_0; }
	}
	public class MovementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Movement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveForwardParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMoveBackwardParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTurnParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStopParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Movement:
		//	MoveForward | MoveBackward | Turn | Stop;
		@Override public ParserRule getRule() { return rule; }
		
		//MoveForward | MoveBackward | Turn | Stop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MoveForward
		public RuleCall getMoveForwardParserRuleCall_0() { return cMoveForwardParserRuleCall_0; }
		
		//MoveBackward
		public RuleCall getMoveBackwardParserRuleCall_1() { return cMoveBackwardParserRuleCall_1; }
		
		//Turn
		public RuleCall getTurnParserRuleCall_2() { return cTurnParserRuleCall_2; }
		
		//Stop
		public RuleCall getStopParserRuleCall_3() { return cStopParserRuleCall_3; }
	}
	public class MoveForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.MoveForward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForwardSpeedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFspeedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFspeedINTTerminalRuleCall_1_0 = (RuleCall)cFspeedAssignment_1.eContents().get(0);
		
		//MoveForward:
		//	'ForwardSpeed:' fspeed=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'ForwardSpeed:' fspeed=INT
		public Group getGroup() { return cGroup; }
		
		//'ForwardSpeed:'
		public Keyword getForwardSpeedKeyword_0() { return cForwardSpeedKeyword_0; }
		
		//fspeed=INT
		public Assignment getFspeedAssignment_1() { return cFspeedAssignment_1; }
		
		//INT
		public RuleCall getFspeedINTTerminalRuleCall_1_0() { return cFspeedINTTerminalRuleCall_1_0; }
	}
	public class MoveBackwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.MoveBackward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackwardSpeedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBspeedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBspeedINTTerminalRuleCall_1_0 = (RuleCall)cBspeedAssignment_1.eContents().get(0);
		
		//MoveBackward:
		//	'BackwardSpeed:' bspeed=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'BackwardSpeed:' bspeed=INT
		public Group getGroup() { return cGroup; }
		
		//'BackwardSpeed:'
		public Keyword getBackwardSpeedKeyword_0() { return cBackwardSpeedKeyword_0; }
		
		//bspeed=INT
		public Assignment getBspeedAssignment_1() { return cBspeedAssignment_1; }
		
		//INT
		public RuleCall getBspeedINTTerminalRuleCall_1_0() { return cBspeedINTTerminalRuleCall_1_0; }
	}
	public class TurnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Turn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnAngleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAngleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAngleINTTerminalRuleCall_1_0 = (RuleCall)cAngleAssignment_1.eContents().get(0);
		
		//Turn:
		//	'TurnAngle:' angle=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'TurnAngle:' angle=INT
		public Group getGroup() { return cGroup; }
		
		//'TurnAngle:'
		public Keyword getTurnAngleKeyword_0() { return cTurnAngleKeyword_0; }
		
		//angle=INT
		public Assignment getAngleAssignment_1() { return cAngleAssignment_1; }
		
		//INT
		public RuleCall getAngleINTTerminalRuleCall_1_0() { return cAngleINTTerminalRuleCall_1_0; }
	}
	public class StopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Stop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaitForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDurationINTTerminalRuleCall_1_0 = (RuleCall)cDurationAssignment_1.eContents().get(0);
		
		//Stop:
		//	'WaitFor:' duration=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'WaitFor:' duration=INT
		public Group getGroup() { return cGroup; }
		
		//'WaitFor:'
		public Keyword getWaitForKeyword_0() { return cWaitForKeyword_0; }
		
		//duration=INT
		public Assignment getDurationAssignment_1() { return cDurationAssignment_1; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_1_0() { return cDurationINTTerminalRuleCall_1_0; }
	}
	
	
	private final BehaviourElements pBehaviour;
	private final MovementElements pMovement;
	private final MoveForwardElements pMoveForward;
	private final MoveBackwardElements pMoveBackward;
	private final TurnElements pTurn;
	private final StopElements pStop;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RobotDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBehaviour = new BehaviourElements();
		this.pMovement = new MovementElements();
		this.pMoveForward = new MoveForwardElements();
		this.pMoveBackward = new MoveBackwardElements();
		this.pTurn = new TurnElements();
		this.pStop = new StopElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("des.missionrobot.RobotDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Behaviour:
	//	'Behavior' name=ID
	//	'priority' prio=INT
	//	'movements:' moves=Movement;
	public BehaviourElements getBehaviourAccess() {
		return pBehaviour;
	}
	
	public ParserRule getBehaviourRule() {
		return getBehaviourAccess().getRule();
	}
	
	//Movement:
	//	MoveForward | MoveBackward | Turn | Stop;
	public MovementElements getMovementAccess() {
		return pMovement;
	}
	
	public ParserRule getMovementRule() {
		return getMovementAccess().getRule();
	}
	
	//MoveForward:
	//	'ForwardSpeed:' fspeed=INT;
	public MoveForwardElements getMoveForwardAccess() {
		return pMoveForward;
	}
	
	public ParserRule getMoveForwardRule() {
		return getMoveForwardAccess().getRule();
	}
	
	//MoveBackward:
	//	'BackwardSpeed:' bspeed=INT;
	public MoveBackwardElements getMoveBackwardAccess() {
		return pMoveBackward;
	}
	
	public ParserRule getMoveBackwardRule() {
		return getMoveBackwardAccess().getRule();
	}
	
	//Turn:
	//	'TurnAngle:' angle=INT;
	public TurnElements getTurnAccess() {
		return pTurn;
	}
	
	public ParserRule getTurnRule() {
		return getTurnAccess().getRule();
	}
	
	//Stop:
	//	'WaitFor:' duration=INT;
	public StopElements getStopAccess() {
		return pStop;
	}
	
	public ParserRule getStopRule() {
		return getStopAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
