/*
 * generated by Xtext 2.10.0
 */
package des.missionrobot.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RobotDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MissionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.MissionList");
		private final Assignment cMissionListAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMissionListMissionParserRuleCall_0 = (RuleCall)cMissionListAssignment.eContents().get(0);
		
		//MissionList:
		//	missionList+=Mission+;
		@Override public ParserRule getRule() { return rule; }
		
		//missionList+=Mission+
		public Assignment getMissionListAssignment() { return cMissionListAssignment; }
		
		//Mission
		public RuleCall getMissionListMissionParserRuleCall_0() { return cMissionListMissionParserRuleCall_0; }
	}
	public class MissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Mission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMissionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cBehaviorsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBehaviorListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBehaviorListBehaviorParserRuleCall_3_0 = (RuleCall)cBehaviorListAssignment_3.eContents().get(0);
		private final Keyword cGoalKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cGoalEventsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cGoalEventsEventCrossReference_5_0 = (CrossReference)cGoalEventsAssignment_5.eContents().get(0);
		private final RuleCall cGoalEventsEventIDTerminalRuleCall_5_0_1 = (RuleCall)cGoalEventsEventCrossReference_5_0.eContents().get(1);
		
		//Mission:
		//	'Mission' name=ID
		//	'Behaviors:' behaviorList+=Behavior+
		//	'Goal:' goalEvents+=[Event];
		@Override public ParserRule getRule() { return rule; }
		
		//'Mission' name=ID 'Behaviors:' behaviorList+=Behavior+ 'Goal:' goalEvents+=[Event]
		public Group getGroup() { return cGroup; }
		
		//'Mission'
		public Keyword getMissionKeyword_0() { return cMissionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'Behaviors:'
		public Keyword getBehaviorsKeyword_2() { return cBehaviorsKeyword_2; }
		
		//behaviorList+=Behavior+
		public Assignment getBehaviorListAssignment_3() { return cBehaviorListAssignment_3; }
		
		//Behavior
		public RuleCall getBehaviorListBehaviorParserRuleCall_3_0() { return cBehaviorListBehaviorParserRuleCall_3_0; }
		
		//'Goal:'
		public Keyword getGoalKeyword_4() { return cGoalKeyword_4; }
		
		//goalEvents+=[Event]
		public Assignment getGoalEventsAssignment_5() { return cGoalEventsAssignment_5; }
		
		//[Event]
		public CrossReference getGoalEventsEventCrossReference_5_0() { return cGoalEventsEventCrossReference_5_0; }
		
		//ID
		public RuleCall getGoalEventsEventIDTerminalRuleCall_5_0_1() { return cGoalEventsEventIDTerminalRuleCall_5_0_1; }
	}
	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPriorityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPrioAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPrioINTTerminalRuleCall_3_0 = (RuleCall)cPrioAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Keyword cTriggersKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cTriggerListAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cTriggerListTriggerParserRuleCall_4_0_1_0 = (RuleCall)cTriggerListAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cReactionsKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cReactionListAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cReactionListReactionParserRuleCall_4_1_1_0 = (RuleCall)cReactionListAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cActionsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cActionListAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cActionListActionParserRuleCall_5_1_0 = (RuleCall)cActionListAssignment_5_1.eContents().get(0);
		
		//Behavior:
		//	'Behavior:' name=ID
		//	'priority:' prio=INT (('Triggers:' triggerList+=Trigger+) ('Reactions:' reactionList+=Reaction+)?)? ('Actions:'
		//	actionList+=Action+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Behavior:' name=ID 'priority:' prio=INT (('Triggers:' triggerList+=Trigger+) ('Reactions:' reactionList+=Reaction+)?)?
		//('Actions:' actionList+=Action+)?
		public Group getGroup() { return cGroup; }
		
		//'Behavior:'
		public Keyword getBehaviorKeyword_0() { return cBehaviorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'priority:'
		public Keyword getPriorityKeyword_2() { return cPriorityKeyword_2; }
		
		//prio=INT
		public Assignment getPrioAssignment_3() { return cPrioAssignment_3; }
		
		//INT
		public RuleCall getPrioINTTerminalRuleCall_3_0() { return cPrioINTTerminalRuleCall_3_0; }
		
		//(('Triggers:' triggerList+=Trigger+) ('Reactions:' reactionList+=Reaction+)?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('Triggers:' triggerList+=Trigger+)
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'Triggers:'
		public Keyword getTriggersKeyword_4_0_0() { return cTriggersKeyword_4_0_0; }
		
		//triggerList+=Trigger+
		public Assignment getTriggerListAssignment_4_0_1() { return cTriggerListAssignment_4_0_1; }
		
		//Trigger
		public RuleCall getTriggerListTriggerParserRuleCall_4_0_1_0() { return cTriggerListTriggerParserRuleCall_4_0_1_0; }
		
		//('Reactions:' reactionList+=Reaction+)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'Reactions:'
		public Keyword getReactionsKeyword_4_1_0() { return cReactionsKeyword_4_1_0; }
		
		//reactionList+=Reaction+
		public Assignment getReactionListAssignment_4_1_1() { return cReactionListAssignment_4_1_1; }
		
		//Reaction
		public RuleCall getReactionListReactionParserRuleCall_4_1_1_0() { return cReactionListReactionParserRuleCall_4_1_1_0; }
		
		//('Actions:' actionList+=Action+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'Actions:'
		public Keyword getActionsKeyword_5_0() { return cActionsKeyword_5_0; }
		
		//actionList+=Action+
		public Assignment getActionListAssignment_5_1() { return cActionListAssignment_5_1; }
		
		//Action
		public RuleCall getActionListActionParserRuleCall_5_1_0() { return cActionListActionParserRuleCall_5_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cMoveKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cDirAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDirDirectionEnumRuleCall_0_1_0 = (RuleCall)cDirAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cForKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cDurationAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cDurationINTTerminalRuleCall_0_2_1_0 = (RuleCall)cDurationAssignment_0_2_1.eContents().get(0);
		private final Keyword cSecKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cAtKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cSpeedAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cSpeedSpeedEnumRuleCall_0_3_1_0 = (RuleCall)cSpeedAssignment_0_3_1.eContents().get(0);
		private final Keyword cSpeedKeyword_0_3_2 = (Keyword)cGroup_0_3.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTurnKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDirAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDirDirectionEnumRuleCall_1_1_0 = (RuleCall)cDirAssignment_1_1.eContents().get(0);
		private final Assignment cDegrAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDegrINTTerminalRuleCall_1_2_0 = (RuleCall)cDegrAssignment_1_2.eContents().get(0);
		private final Keyword cDegKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cArmKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOpArmOpEnumRuleCall_2_1_0 = (RuleCall)cOpAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cPlayKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cSoundKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cSoundAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cSoundSoundEnumRuleCall_3_2_0 = (RuleCall)cSoundAssignment_3_2.eContents().get(0);
		
		//Action:
		//	'Move' dir=Direction ('for' duration=INT 'sec')? ('at' speed=Speed 'speed')? |
		//	'Turn' dir=Direction degr=INT 'deg' |
		//	'Arm' op=ArmOp |
		//	'Play' 'sound' sound=Sound;
		@Override public ParserRule getRule() { return rule; }
		
		//'Move' dir=Direction ('for' duration=INT 'sec')? ('at' speed=Speed 'speed')? | 'Turn' dir=Direction degr=INT 'deg' |
		//'Arm' op=ArmOp | 'Play' 'sound' sound=Sound
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Move' dir=Direction ('for' duration=INT 'sec')? ('at' speed=Speed 'speed')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'Move'
		public Keyword getMoveKeyword_0_0() { return cMoveKeyword_0_0; }
		
		//dir=Direction
		public Assignment getDirAssignment_0_1() { return cDirAssignment_0_1; }
		
		//Direction
		public RuleCall getDirDirectionEnumRuleCall_0_1_0() { return cDirDirectionEnumRuleCall_0_1_0; }
		
		//('for' duration=INT 'sec')?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'for'
		public Keyword getForKeyword_0_2_0() { return cForKeyword_0_2_0; }
		
		//duration=INT
		public Assignment getDurationAssignment_0_2_1() { return cDurationAssignment_0_2_1; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_0_2_1_0() { return cDurationINTTerminalRuleCall_0_2_1_0; }
		
		//'sec'
		public Keyword getSecKeyword_0_2_2() { return cSecKeyword_0_2_2; }
		
		//('at' speed=Speed 'speed')?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'at'
		public Keyword getAtKeyword_0_3_0() { return cAtKeyword_0_3_0; }
		
		//speed=Speed
		public Assignment getSpeedAssignment_0_3_1() { return cSpeedAssignment_0_3_1; }
		
		//Speed
		public RuleCall getSpeedSpeedEnumRuleCall_0_3_1_0() { return cSpeedSpeedEnumRuleCall_0_3_1_0; }
		
		//'speed'
		public Keyword getSpeedKeyword_0_3_2() { return cSpeedKeyword_0_3_2; }
		
		//'Turn' dir=Direction degr=INT 'deg'
		public Group getGroup_1() { return cGroup_1; }
		
		//'Turn'
		public Keyword getTurnKeyword_1_0() { return cTurnKeyword_1_0; }
		
		//dir=Direction
		public Assignment getDirAssignment_1_1() { return cDirAssignment_1_1; }
		
		//Direction
		public RuleCall getDirDirectionEnumRuleCall_1_1_0() { return cDirDirectionEnumRuleCall_1_1_0; }
		
		//degr=INT
		public Assignment getDegrAssignment_1_2() { return cDegrAssignment_1_2; }
		
		//INT
		public RuleCall getDegrINTTerminalRuleCall_1_2_0() { return cDegrINTTerminalRuleCall_1_2_0; }
		
		//'deg'
		public Keyword getDegKeyword_1_3() { return cDegKeyword_1_3; }
		
		//'Arm' op=ArmOp
		public Group getGroup_2() { return cGroup_2; }
		
		//'Arm'
		public Keyword getArmKeyword_2_0() { return cArmKeyword_2_0; }
		
		//op=ArmOp
		public Assignment getOpAssignment_2_1() { return cOpAssignment_2_1; }
		
		//ArmOp
		public RuleCall getOpArmOpEnumRuleCall_2_1_0() { return cOpArmOpEnumRuleCall_2_1_0; }
		
		//'Play' 'sound' sound=Sound
		public Group getGroup_3() { return cGroup_3; }
		
		//'Play'
		public Keyword getPlayKeyword_3_0() { return cPlayKeyword_3_0; }
		
		//'sound'
		public Keyword getSoundKeyword_3_1() { return cSoundKeyword_3_1; }
		
		//sound=Sound
		public Assignment getSoundAssignment_3_2() { return cSoundAssignment_3_2; }
		
		//Sound
		public RuleCall getSoundSoundEnumRuleCall_3_2_0() { return cSoundSoundEnumRuleCall_3_2_0; }
	}
	public class ReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Reaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEventEventCrossReference_1_0 = (CrossReference)cEventAssignment_1.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_1_0_1 = (RuleCall)cEventEventCrossReference_1_0.eContents().get(1);
		private final Keyword cTriggeredKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReactionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReactionsActionParserRuleCall_4_0 = (RuleCall)cReactionsAssignment_4.eContents().get(0);
		
		//Reaction:
		//	'if' event=[Event] 'triggered' 'Do:' reactions+=Action+;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' event=[Event] 'triggered' 'Do:' reactions+=Action+
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//event=[Event]
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_1_0() { return cEventEventCrossReference_1_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_1_0_1() { return cEventEventIDTerminalRuleCall_1_0_1; }
		
		//'triggered'
		public Keyword getTriggeredKeyword_2() { return cTriggeredKeyword_2; }
		
		//'Do:'
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }
		
		//reactions+=Action+
		public Assignment getReactionsAssignment_4() { return cReactionsAssignment_4; }
		
		//Action
		public RuleCall getReactionsActionParserRuleCall_4_0() { return cReactionsActionParserRuleCall_4_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cEventKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cRepeatAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRepeatRepeatEnumRuleCall_0_2_0 = (RuleCall)cRepeatAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTimeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTimeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTimeINTTerminalRuleCall_1_1_0 = (RuleCall)cTimeAssignment_1_1.eContents().get(0);
		private final Keyword cMinutesKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Event:
		//	'Event:' name=ID
		//	repeat=Repeat? |
		//	'Time:' time=INT 'minutes';
		@Override public ParserRule getRule() { return rule; }
		
		//'Event:' name=ID repeat=Repeat? | 'Time:' time=INT 'minutes'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Event:' name=ID repeat=Repeat?
		public Group getGroup_0() { return cGroup_0; }
		
		//'Event:'
		public Keyword getEventKeyword_0_0() { return cEventKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//repeat=Repeat?
		public Assignment getRepeatAssignment_0_2() { return cRepeatAssignment_0_2; }
		
		//Repeat
		public RuleCall getRepeatRepeatEnumRuleCall_0_2_0() { return cRepeatRepeatEnumRuleCall_0_2_0; }
		
		//'Time:' time=INT 'minutes'
		public Group getGroup_1() { return cGroup_1; }
		
		//'Time:'
		public Keyword getTimeKeyword_1_0() { return cTimeKeyword_1_0; }
		
		//time=INT
		public Assignment getTimeAssignment_1_1() { return cTimeAssignment_1_1; }
		
		//INT
		public RuleCall getTimeINTTerminalRuleCall_1_1_0() { return cTimeINTTerminalRuleCall_1_1_0; }
		
		//'minutes'
		public Keyword getMinutesKeyword_1_2() { return cMinutesKeyword_1_2; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBoolTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBoolTypeBoolEnumRuleCall_0_0 = (RuleCall)cBoolTypeAssignment_0.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEventEventCrossReference_1_0 = (CrossReference)cEventAssignment_1.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_1_0_1 = (RuleCall)cEventEventCrossReference_1_0.eContents().get(1);
		private final Assignment cSensorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSensorSensorEnumRuleCall_2_0 = (RuleCall)cSensorAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cIsKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cColorAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cColorColorEnumRuleCall_3_0_1_0 = (RuleCall)cColorAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cDistanceKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cBoolAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cBoolBoolEnumRuleCall_3_1_1_0 = (RuleCall)cBoolAssignment_3_1_1.eContents().get(0);
		private final Keyword cThanKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Assignment cDistanceAssignment_3_1_3 = (Assignment)cGroup_3_1.eContents().get(3);
		private final RuleCall cDistanceINTTerminalRuleCall_3_1_3_0 = (RuleCall)cDistanceAssignment_3_1_3.eContents().get(0);
		private final Keyword cCmKeyword_3_1_4 = (Keyword)cGroup_3_1.eContents().get(4);
		
		//Trigger:
		//	boolType=Bool?
		//	event=[Event]?
		//	sensor=Sensor ('is' color=Color | 'distance' bool=Bool 'than' distance=INT 'cm');
		@Override public ParserRule getRule() { return rule; }
		
		//boolType=Bool? event=[Event]? sensor=Sensor ('is' color=Color | 'distance' bool=Bool 'than' distance=INT 'cm')
		public Group getGroup() { return cGroup; }
		
		//boolType=Bool?
		public Assignment getBoolTypeAssignment_0() { return cBoolTypeAssignment_0; }
		
		//Bool
		public RuleCall getBoolTypeBoolEnumRuleCall_0_0() { return cBoolTypeBoolEnumRuleCall_0_0; }
		
		//event=[Event]?
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_1_0() { return cEventEventCrossReference_1_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_1_0_1() { return cEventEventIDTerminalRuleCall_1_0_1; }
		
		//sensor=Sensor
		public Assignment getSensorAssignment_2() { return cSensorAssignment_2; }
		
		//Sensor
		public RuleCall getSensorSensorEnumRuleCall_2_0() { return cSensorSensorEnumRuleCall_2_0; }
		
		//('is' color=Color | 'distance' bool=Bool 'than' distance=INT 'cm')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'is' color=Color
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'is'
		public Keyword getIsKeyword_3_0_0() { return cIsKeyword_3_0_0; }
		
		//color=Color
		public Assignment getColorAssignment_3_0_1() { return cColorAssignment_3_0_1; }
		
		//Color
		public RuleCall getColorColorEnumRuleCall_3_0_1_0() { return cColorColorEnumRuleCall_3_0_1_0; }
		
		//'distance' bool=Bool 'than' distance=INT 'cm'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_3_1_0() { return cDistanceKeyword_3_1_0; }
		
		//bool=Bool
		public Assignment getBoolAssignment_3_1_1() { return cBoolAssignment_3_1_1; }
		
		//Bool
		public RuleCall getBoolBoolEnumRuleCall_3_1_1_0() { return cBoolBoolEnumRuleCall_3_1_1_0; }
		
		//'than'
		public Keyword getThanKeyword_3_1_2() { return cThanKeyword_3_1_2; }
		
		//distance=INT
		public Assignment getDistanceAssignment_3_1_3() { return cDistanceAssignment_3_1_3; }
		
		//INT
		public RuleCall getDistanceINTTerminalRuleCall_3_1_3_0() { return cDistanceINTTerminalRuleCall_3_1_3_0; }
		
		//'cm'
		public Keyword getCmKeyword_3_1_4() { return cCmKeyword_3_1_4; }
	}
	
	public class DirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFORWARDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFORWARDForwardKeyword_0_0 = (Keyword)cFORWARDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBACKWARDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBACKWARDBackwardKeyword_1_0 = (Keyword)cBACKWARDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLEFTLeftKeyword_2_0 = (Keyword)cLEFTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRIGHTRightKeyword_3_0 = (Keyword)cRIGHTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Direction:
		//	FORWARD='forward' |
		//	BACKWARD='backward' |
		//	LEFT='left' |
		//	RIGHT='right';
		public EnumRule getRule() { return rule; }
		
		//FORWARD='forward' | BACKWARD='backward' | LEFT='left' | RIGHT='right'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FORWARD='forward'
		public EnumLiteralDeclaration getFORWARDEnumLiteralDeclaration_0() { return cFORWARDEnumLiteralDeclaration_0; }
		
		//'forward'
		public Keyword getFORWARDForwardKeyword_0_0() { return cFORWARDForwardKeyword_0_0; }
		
		//BACKWARD='backward'
		public EnumLiteralDeclaration getBACKWARDEnumLiteralDeclaration_1() { return cBACKWARDEnumLiteralDeclaration_1; }
		
		//'backward'
		public Keyword getBACKWARDBackwardKeyword_1_0() { return cBACKWARDBackwardKeyword_1_0; }
		
		//LEFT='left'
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_2() { return cLEFTEnumLiteralDeclaration_2; }
		
		//'left'
		public Keyword getLEFTLeftKeyword_2_0() { return cLEFTLeftKeyword_2_0; }
		
		//RIGHT='right'
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_3() { return cRIGHTEnumLiteralDeclaration_3; }
		
		//'right'
		public Keyword getRIGHTRightKeyword_3_0() { return cRIGHTRightKeyword_3_0; }
	}
	public class SpeedElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Speed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHIGHHighKeyword_0_0 = (Keyword)cHIGHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMEDMediumKeyword_1_0 = (Keyword)cMEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLOWLowKeyword_2_0 = (Keyword)cLOWEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Speed:
		//	HIGH='high' |
		//	MED='medium' |
		//	LOW='low';
		public EnumRule getRule() { return rule; }
		
		//HIGH='high' | MED='medium' | LOW='low'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HIGH='high'
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_0() { return cHIGHEnumLiteralDeclaration_0; }
		
		//'high'
		public Keyword getHIGHHighKeyword_0_0() { return cHIGHHighKeyword_0_0; }
		
		//MED='medium'
		public EnumLiteralDeclaration getMEDEnumLiteralDeclaration_1() { return cMEDEnumLiteralDeclaration_1; }
		
		//'medium'
		public Keyword getMEDMediumKeyword_1_0() { return cMEDMediumKeyword_1_0; }
		
		//LOW='low'
		public EnumLiteralDeclaration getLOWEnumLiteralDeclaration_2() { return cLOWEnumLiteralDeclaration_2; }
		
		//'low'
		public Keyword getLOWLowKeyword_2_0() { return cLOWLowKeyword_2_0; }
	}
	public class ArmOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.ArmOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUPRaiseKeyword_0_0 = (Keyword)cUPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDOWNEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDOWNLowerKeyword_1_0 = (Keyword)cDOWNEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ArmOp:
		//	UP='raise' |
		//	DOWN='lower';
		public EnumRule getRule() { return rule; }
		
		//UP='raise' | DOWN='lower'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UP='raise'
		public EnumLiteralDeclaration getUPEnumLiteralDeclaration_0() { return cUPEnumLiteralDeclaration_0; }
		
		//'raise'
		public Keyword getUPRaiseKeyword_0_0() { return cUPRaiseKeyword_0_0; }
		
		//DOWN='lower'
		public EnumLiteralDeclaration getDOWNEnumLiteralDeclaration_1() { return cDOWNEnumLiteralDeclaration_1; }
		
		//'lower'
		public Keyword getDOWNLowerKeyword_1_0() { return cDOWNLowerKeyword_1_0; }
	}
	public class SoundElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Sound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBuzzEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBuzzBuzzKeyword_0_0 = (Keyword)cBuzzEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFanfareEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFanfareFanfareKeyword_1_0 = (Keyword)cFanfareEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Sound:
		//	buzz |
		//	fanfare;
		public EnumRule getRule() { return rule; }
		
		//buzz | fanfare
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//buzz
		public EnumLiteralDeclaration getBuzzEnumLiteralDeclaration_0() { return cBuzzEnumLiteralDeclaration_0; }
		
		//'buzz'
		public Keyword getBuzzBuzzKeyword_0_0() { return cBuzzBuzzKeyword_0_0; }
		
		//fanfare
		public EnumLiteralDeclaration getFanfareEnumLiteralDeclaration_1() { return cFanfareEnumLiteralDeclaration_1; }
		
		//'fanfare'
		public Keyword getFanfareFanfareKeyword_1_0() { return cFanfareFanfareKeyword_1_0; }
	}
	public class SensorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Sensor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCOLOREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCOLORColorKeyword_0_0 = (Keyword)cCOLOREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEFTLIGHTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLEFTLIGHTLeftLightKeyword_1_0 = (Keyword)cLEFTLIGHTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTLIGHTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRIGHTLIGHTRightLightKeyword_2_0 = (Keyword)cRIGHTLIGHTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBACKUSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBACKUSRearHeightKeyword_3_0 = (Keyword)cBACKUSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFRONTUSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFRONTUSFrontDistanceKeyword_4_0 = (Keyword)cFRONTUSEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Sensor:
		//	COLOR='Color' |
		//	LEFTLIGHT='LeftLight' |
		//	RIGHTLIGHT='RightLight' |
		//	BACKUS='RearHeight' |
		//	FRONTUS='FrontDistance';
		public EnumRule getRule() { return rule; }
		
		//COLOR='Color' | LEFTLIGHT='LeftLight' | RIGHTLIGHT='RightLight' | BACKUS='RearHeight' | FRONTUS='FrontDistance'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//COLOR='Color'
		public EnumLiteralDeclaration getCOLOREnumLiteralDeclaration_0() { return cCOLOREnumLiteralDeclaration_0; }
		
		//'Color'
		public Keyword getCOLORColorKeyword_0_0() { return cCOLORColorKeyword_0_0; }
		
		//LEFTLIGHT='LeftLight'
		public EnumLiteralDeclaration getLEFTLIGHTEnumLiteralDeclaration_1() { return cLEFTLIGHTEnumLiteralDeclaration_1; }
		
		//'LeftLight'
		public Keyword getLEFTLIGHTLeftLightKeyword_1_0() { return cLEFTLIGHTLeftLightKeyword_1_0; }
		
		//RIGHTLIGHT='RightLight'
		public EnumLiteralDeclaration getRIGHTLIGHTEnumLiteralDeclaration_2() { return cRIGHTLIGHTEnumLiteralDeclaration_2; }
		
		//'RightLight'
		public Keyword getRIGHTLIGHTRightLightKeyword_2_0() { return cRIGHTLIGHTRightLightKeyword_2_0; }
		
		//BACKUS='RearHeight'
		public EnumLiteralDeclaration getBACKUSEnumLiteralDeclaration_3() { return cBACKUSEnumLiteralDeclaration_3; }
		
		//'RearHeight'
		public Keyword getBACKUSRearHeightKeyword_3_0() { return cBACKUSRearHeightKeyword_3_0; }
		
		//FRONTUS='FrontDistance'
		public EnumLiteralDeclaration getFRONTUSEnumLiteralDeclaration_4() { return cFRONTUSEnumLiteralDeclaration_4; }
		
		//'FrontDistance'
		public Keyword getFRONTUSFrontDistanceKeyword_4_0() { return cFRONTUSFrontDistanceKeyword_4_0; }
	}
	public class ColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREDRedKeyword_0_0 = (Keyword)cREDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWHITEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWHITEWhiteKeyword_1_0 = (Keyword)cWHITEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Color:
		//	RED='red' |
		//	WHITE='white';
		public EnumRule getRule() { return rule; }
		
		//RED='red' | WHITE='white'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RED='red'
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_0() { return cREDEnumLiteralDeclaration_0; }
		
		//'red'
		public Keyword getREDRedKeyword_0_0() { return cREDRedKeyword_0_0; }
		
		//WHITE='white'
		public EnumLiteralDeclaration getWHITEEnumLiteralDeclaration_1() { return cWHITEEnumLiteralDeclaration_1; }
		
		//'white'
		public Keyword getWHITEWhiteKeyword_1_0() { return cWHITEWhiteKeyword_1_0; }
	}
	public class BoolElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Bool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLLessKeyword_0_0 = (Keyword)cLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGGreaterKeyword_1_0 = (Keyword)cGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cANDAndKeyword_2_0 = (Keyword)cANDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOROrKeyword_3_0 = (Keyword)cOREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Bool:
		//	L='less' |
		//	G='greater' |
		//	AND='and' |
		//	OR='or';
		public EnumRule getRule() { return rule; }
		
		//L='less' | G='greater' | AND='and' | OR='or'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//L='less'
		public EnumLiteralDeclaration getLEnumLiteralDeclaration_0() { return cLEnumLiteralDeclaration_0; }
		
		//'less'
		public Keyword getLLessKeyword_0_0() { return cLLessKeyword_0_0; }
		
		//G='greater'
		public EnumLiteralDeclaration getGEnumLiteralDeclaration_1() { return cGEnumLiteralDeclaration_1; }
		
		//'greater'
		public Keyword getGGreaterKeyword_1_0() { return cGGreaterKeyword_1_0; }
		
		//AND='and'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_2() { return cANDEnumLiteralDeclaration_2; }
		
		//'and'
		public Keyword getANDAndKeyword_2_0() { return cANDAndKeyword_2_0; }
		
		//OR='or'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_3() { return cOREnumLiteralDeclaration_3; }
		
		//'or'
		public Keyword getOROrKeyword_3_0() { return cOROrKeyword_3_0; }
	}
	public class RepeatElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Repeat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cONCEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cONCEOnceKeyword_0_0 = (Keyword)cONCEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cREPEATEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cREPEATRepeatableKeyword_1_0 = (Keyword)cREPEATEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Repeat:
		//	ONCE='once' |
		//	REPEAT='repeatable';
		public EnumRule getRule() { return rule; }
		
		//ONCE='once' | REPEAT='repeatable'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ONCE='once'
		public EnumLiteralDeclaration getONCEEnumLiteralDeclaration_0() { return cONCEEnumLiteralDeclaration_0; }
		
		//'once'
		public Keyword getONCEOnceKeyword_0_0() { return cONCEOnceKeyword_0_0; }
		
		//REPEAT='repeatable'
		public EnumLiteralDeclaration getREPEATEnumLiteralDeclaration_1() { return cREPEATEnumLiteralDeclaration_1; }
		
		//'repeatable'
		public Keyword getREPEATRepeatableKeyword_1_0() { return cREPEATRepeatableKeyword_1_0; }
	}
	
	private final MissionListElements pMissionList;
	private final MissionElements pMission;
	private final BehaviorElements pBehavior;
	private final ActionElements pAction;
	private final ReactionElements pReaction;
	private final EventElements pEvent;
	private final TriggerElements pTrigger;
	private final DirectionElements eDirection;
	private final SpeedElements eSpeed;
	private final ArmOpElements eArmOp;
	private final SoundElements eSound;
	private final SensorElements eSensor;
	private final ColorElements eColor;
	private final BoolElements eBool;
	private final RepeatElements eRepeat;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RobotDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMissionList = new MissionListElements();
		this.pMission = new MissionElements();
		this.pBehavior = new BehaviorElements();
		this.pAction = new ActionElements();
		this.pReaction = new ReactionElements();
		this.pEvent = new EventElements();
		this.pTrigger = new TriggerElements();
		this.eDirection = new DirectionElements();
		this.eSpeed = new SpeedElements();
		this.eArmOp = new ArmOpElements();
		this.eSound = new SoundElements();
		this.eSensor = new SensorElements();
		this.eColor = new ColorElements();
		this.eBool = new BoolElements();
		this.eRepeat = new RepeatElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("des.missionrobot.RobotDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MissionList:
	//	missionList+=Mission+;
	public MissionListElements getMissionListAccess() {
		return pMissionList;
	}
	
	public ParserRule getMissionListRule() {
		return getMissionListAccess().getRule();
	}
	
	//Mission:
	//	'Mission' name=ID
	//	'Behaviors:' behaviorList+=Behavior+
	//	'Goal:' goalEvents+=[Event];
	public MissionElements getMissionAccess() {
		return pMission;
	}
	
	public ParserRule getMissionRule() {
		return getMissionAccess().getRule();
	}
	
	//Behavior:
	//	'Behavior:' name=ID
	//	'priority:' prio=INT (('Triggers:' triggerList+=Trigger+) ('Reactions:' reactionList+=Reaction+)?)? ('Actions:'
	//	actionList+=Action+)?;
	public BehaviorElements getBehaviorAccess() {
		return pBehavior;
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}
	
	//Action:
	//	'Move' dir=Direction ('for' duration=INT 'sec')? ('at' speed=Speed 'speed')? |
	//	'Turn' dir=Direction degr=INT 'deg' |
	//	'Arm' op=ArmOp |
	//	'Play' 'sound' sound=Sound;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Reaction:
	//	'if' event=[Event] 'triggered' 'Do:' reactions+=Action+;
	public ReactionElements getReactionAccess() {
		return pReaction;
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}
	
	//Event:
	//	'Event:' name=ID
	//	repeat=Repeat? |
	//	'Time:' time=INT 'minutes';
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Trigger:
	//	boolType=Bool?
	//	event=[Event]?
	//	sensor=Sensor ('is' color=Color | 'distance' bool=Bool 'than' distance=INT 'cm');
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//enum Direction:
	//	FORWARD='forward' |
	//	BACKWARD='backward' |
	//	LEFT='left' |
	//	RIGHT='right';
	public DirectionElements getDirectionAccess() {
		return eDirection;
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}
	
	//enum Speed:
	//	HIGH='high' |
	//	MED='medium' |
	//	LOW='low';
	public SpeedElements getSpeedAccess() {
		return eSpeed;
	}
	
	public EnumRule getSpeedRule() {
		return getSpeedAccess().getRule();
	}
	
	//enum ArmOp:
	//	UP='raise' |
	//	DOWN='lower';
	public ArmOpElements getArmOpAccess() {
		return eArmOp;
	}
	
	public EnumRule getArmOpRule() {
		return getArmOpAccess().getRule();
	}
	
	//enum Sound:
	//	buzz |
	//	fanfare;
	public SoundElements getSoundAccess() {
		return eSound;
	}
	
	public EnumRule getSoundRule() {
		return getSoundAccess().getRule();
	}
	
	//enum Sensor:
	//	COLOR='Color' |
	//	LEFTLIGHT='LeftLight' |
	//	RIGHTLIGHT='RightLight' |
	//	BACKUS='RearHeight' |
	//	FRONTUS='FrontDistance';
	public SensorElements getSensorAccess() {
		return eSensor;
	}
	
	public EnumRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//enum Color:
	//	RED='red' |
	//	WHITE='white';
	public ColorElements getColorAccess() {
		return eColor;
	}
	
	public EnumRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//enum Bool:
	//	L='less' |
	//	G='greater' |
	//	AND='and' |
	//	OR='or';
	public BoolElements getBoolAccess() {
		return eBool;
	}
	
	public EnumRule getBoolRule() {
		return getBoolAccess().getRule();
	}
	
	//enum Repeat:
	//	ONCE='once' |
	//	REPEAT='repeatable';
	public RepeatElements getRepeatAccess() {
		return eRepeat;
	}
	
	public EnumRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
