/*
 * generated by Xtext 2.10.0
 */
package des.missionrobot.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RobotDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Mission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMissionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cBehavioursKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBehaviourListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBehaviourListBehaviourParserRuleCall_3_0 = (RuleCall)cBehaviourListAssignment_3.eContents().get(0);
		private final Keyword cGoalKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cGoalConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGoalConditionTriggerParserRuleCall_5_0 = (RuleCall)cGoalConditionAssignment_5.eContents().get(0);
		
		//Mission:
		//	'Mission' name=ID
		//	'Behaviours:' behaviourList+=Behaviour+
		//	'Goal:' goalCondition+=Trigger+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Mission' name=ID 'Behaviours:' behaviourList+=Behaviour+ 'Goal:' goalCondition+=Trigger+
		public Group getGroup() { return cGroup; }
		
		//'Mission'
		public Keyword getMissionKeyword_0() { return cMissionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'Behaviours:'
		public Keyword getBehavioursKeyword_2() { return cBehavioursKeyword_2; }
		
		//behaviourList+=Behaviour+
		public Assignment getBehaviourListAssignment_3() { return cBehaviourListAssignment_3; }
		
		//Behaviour
		public RuleCall getBehaviourListBehaviourParserRuleCall_3_0() { return cBehaviourListBehaviourParserRuleCall_3_0; }
		
		//'Goal:'
		public Keyword getGoalKeyword_4() { return cGoalKeyword_4; }
		
		//goalCondition+=Trigger+
		public Assignment getGoalConditionAssignment_5() { return cGoalConditionAssignment_5; }
		
		//Trigger
		public RuleCall getGoalConditionTriggerParserRuleCall_5_0() { return cGoalConditionTriggerParserRuleCall_5_0; }
	}
	public class BehaviourElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Behaviour");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPriorityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPrioAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPrioINTTerminalRuleCall_3_0 = (RuleCall)cPrioAssignment_3.eContents().get(0);
		private final Keyword cDevicesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDeviceListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeviceListDeviceParserRuleCall_5_0 = (RuleCall)cDeviceListAssignment_5.eContents().get(0);
		private final Keyword cActionsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cActionListAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cActionListActionParserRuleCall_7_0 = (RuleCall)cActionListAssignment_7.eContents().get(0);
		private final Keyword cTriggerKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTriggerListAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTriggerListTriggerParserRuleCall_9_0 = (RuleCall)cTriggerListAssignment_9.eContents().get(0);
		
		//Behaviour:
		//	'Behavior:' name=ID
		//	'priority:' prio=INT
		//	'devices:' deviceList+=Device+
		//	'actions:' actionList+=Action+
		//	'trigger:' triggerList=Trigger;
		@Override public ParserRule getRule() { return rule; }
		
		//'Behavior:' name=ID 'priority:' prio=INT 'devices:' deviceList+=Device+ 'actions:' actionList+=Action+ 'trigger:'
		//triggerList=Trigger
		public Group getGroup() { return cGroup; }
		
		//'Behavior:'
		public Keyword getBehaviorKeyword_0() { return cBehaviorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'priority:'
		public Keyword getPriorityKeyword_2() { return cPriorityKeyword_2; }
		
		//prio=INT
		public Assignment getPrioAssignment_3() { return cPrioAssignment_3; }
		
		//INT
		public RuleCall getPrioINTTerminalRuleCall_3_0() { return cPrioINTTerminalRuleCall_3_0; }
		
		//'devices:'
		public Keyword getDevicesKeyword_4() { return cDevicesKeyword_4; }
		
		//deviceList+=Device+
		public Assignment getDeviceListAssignment_5() { return cDeviceListAssignment_5; }
		
		//Device
		public RuleCall getDeviceListDeviceParserRuleCall_5_0() { return cDeviceListDeviceParserRuleCall_5_0; }
		
		//'actions:'
		public Keyword getActionsKeyword_6() { return cActionsKeyword_6; }
		
		//actionList+=Action+
		public Assignment getActionListAssignment_7() { return cActionListAssignment_7; }
		
		//Action
		public RuleCall getActionListActionParserRuleCall_7_0() { return cActionListActionParserRuleCall_7_0; }
		
		//'trigger:'
		public Keyword getTriggerKeyword_8() { return cTriggerKeyword_8; }
		
		//triggerList=Trigger
		public Assignment getTriggerListAssignment_9() { return cTriggerListAssignment_9; }
		
		//Trigger
		public RuleCall getTriggerListTriggerParserRuleCall_9_0() { return cTriggerListTriggerParserRuleCall_9_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMovementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSoundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIOParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Action:
		//	Movement | Sound | IO;
		@Override public ParserRule getRule() { return rule; }
		
		//Movement | Sound | IO
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Movement
		public RuleCall getMovementParserRuleCall_0() { return cMovementParserRuleCall_0; }
		
		//Sound
		public RuleCall getSoundParserRuleCall_1() { return cSoundParserRuleCall_1; }
		
		//IO
		public RuleCall getIOParserRuleCall_2() { return cIOParserRuleCall_2; }
	}
	public class MovementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Movement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveForwardParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMoveBackwardParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTurnParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStopParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Movement:
		//	MoveForward | MoveBackward | Turn | Stop;
		@Override public ParserRule getRule() { return rule; }
		
		//MoveForward | MoveBackward | Turn | Stop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MoveForward
		public RuleCall getMoveForwardParserRuleCall_0() { return cMoveForwardParserRuleCall_0; }
		
		//MoveBackward
		public RuleCall getMoveBackwardParserRuleCall_1() { return cMoveBackwardParserRuleCall_1; }
		
		//Turn
		public RuleCall getTurnParserRuleCall_2() { return cTurnParserRuleCall_2; }
		
		//Stop
		public RuleCall getStopParserRuleCall_3() { return cStopParserRuleCall_3; }
	}
	public class MoveForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.MoveForward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForwardSpeedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFspeedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFspeedINTTerminalRuleCall_1_0 = (RuleCall)cFspeedAssignment_1.eContents().get(0);
		
		//MoveForward:
		//	'ForwardSpeed:' fspeed=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'ForwardSpeed:' fspeed=INT
		public Group getGroup() { return cGroup; }
		
		//'ForwardSpeed:'
		public Keyword getForwardSpeedKeyword_0() { return cForwardSpeedKeyword_0; }
		
		//fspeed=INT
		public Assignment getFspeedAssignment_1() { return cFspeedAssignment_1; }
		
		//INT
		public RuleCall getFspeedINTTerminalRuleCall_1_0() { return cFspeedINTTerminalRuleCall_1_0; }
	}
	public class MoveBackwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.MoveBackward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackwardSpeedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBspeedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBspeedINTTerminalRuleCall_1_0 = (RuleCall)cBspeedAssignment_1.eContents().get(0);
		
		//MoveBackward:
		//	'BackwardSpeed:' bspeed=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'BackwardSpeed:' bspeed=INT
		public Group getGroup() { return cGroup; }
		
		//'BackwardSpeed:'
		public Keyword getBackwardSpeedKeyword_0() { return cBackwardSpeedKeyword_0; }
		
		//bspeed=INT
		public Assignment getBspeedAssignment_1() { return cBspeedAssignment_1; }
		
		//INT
		public RuleCall getBspeedINTTerminalRuleCall_1_0() { return cBspeedINTTerminalRuleCall_1_0; }
	}
	public class TurnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Turn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnAngleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAngleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAngleINTTerminalRuleCall_1_0 = (RuleCall)cAngleAssignment_1.eContents().get(0);
		
		//Turn:
		//	'TurnAngle:' angle=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'TurnAngle:' angle=INT
		public Group getGroup() { return cGroup; }
		
		//'TurnAngle:'
		public Keyword getTurnAngleKeyword_0() { return cTurnAngleKeyword_0; }
		
		//angle=INT
		public Assignment getAngleAssignment_1() { return cAngleAssignment_1; }
		
		//INT
		public RuleCall getAngleINTTerminalRuleCall_1_0() { return cAngleINTTerminalRuleCall_1_0; }
	}
	public class StopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Stop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaitForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDurationINTTerminalRuleCall_1_0 = (RuleCall)cDurationAssignment_1.eContents().get(0);
		
		//Stop:
		//	'WaitFor:' duration=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'WaitFor:' duration=INT
		public Group getGroup() { return cGroup; }
		
		//'WaitFor:'
		public Keyword getWaitForKeyword_0() { return cWaitForKeyword_0; }
		
		//duration=INT
		public Assignment getDurationAssignment_1() { return cDurationAssignment_1; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_1_0() { return cDurationINTTerminalRuleCall_1_0; }
	}
	public class SoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Sound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlaySoundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSoundNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSoundNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cSoundNameAssignment_1.eContents().get(0);
		
		//Sound:
		//	'PlaySound:' soundName=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'PlaySound:' soundName=STRING
		public Group getGroup() { return cGroup; }
		
		//'PlaySound:'
		public Keyword getPlaySoundKeyword_0() { return cPlaySoundKeyword_0; }
		
		//soundName=STRING
		public Assignment getSoundNameAssignment_1() { return cSoundNameAssignment_1; }
		
		//STRING
		public RuleCall getSoundNameSTRINGTerminalRuleCall_1_0() { return cSoundNameSTRINGTerminalRuleCall_1_0; }
	}
	public class IOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.IO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMessageSTRINGTerminalRuleCall_1_0 = (RuleCall)cMessageAssignment_1.eContents().get(0);
		
		//IO:
		//	'PrintMessage' message=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'PrintMessage' message=STRING
		public Group getGroup() { return cGroup; }
		
		//'PrintMessage'
		public Keyword getPrintMessageKeyword_0() { return cPrintMessageKeyword_0; }
		
		//message=STRING
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }
		
		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_1_0() { return cMessageSTRINGTerminalRuleCall_1_0; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionSTRINGTerminalRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		
		//Trigger:
		//	'Condition' condition=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Condition' condition=STRING
		public Group getGroup() { return cGroup; }
		
		//'Condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//condition=STRING
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_1_0() { return cConditionSTRINGTerminalRuleCall_1_0; }
	}
	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "des.missionrobot.RobotDSL.Device");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSTRINGTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Device:
		//	'Device:' type=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Device:' type=STRING
		public Group getGroup() { return cGroup; }
		
		//'Device:'
		public Keyword getDeviceKeyword_0() { return cDeviceKeyword_0; }
		
		//type=STRING
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_1_0() { return cTypeSTRINGTerminalRuleCall_1_0; }
	}
	
	
	private final MissionElements pMission;
	private final BehaviourElements pBehaviour;
	private final ActionElements pAction;
	private final MovementElements pMovement;
	private final MoveForwardElements pMoveForward;
	private final MoveBackwardElements pMoveBackward;
	private final TurnElements pTurn;
	private final StopElements pStop;
	private final SoundElements pSound;
	private final IOElements pIO;
	private final TriggerElements pTrigger;
	private final DeviceElements pDevice;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RobotDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMission = new MissionElements();
		this.pBehaviour = new BehaviourElements();
		this.pAction = new ActionElements();
		this.pMovement = new MovementElements();
		this.pMoveForward = new MoveForwardElements();
		this.pMoveBackward = new MoveBackwardElements();
		this.pTurn = new TurnElements();
		this.pStop = new StopElements();
		this.pSound = new SoundElements();
		this.pIO = new IOElements();
		this.pTrigger = new TriggerElements();
		this.pDevice = new DeviceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("des.missionrobot.RobotDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Mission:
	//	'Mission' name=ID
	//	'Behaviours:' behaviourList+=Behaviour+
	//	'Goal:' goalCondition+=Trigger+;
	public MissionElements getMissionAccess() {
		return pMission;
	}
	
	public ParserRule getMissionRule() {
		return getMissionAccess().getRule();
	}
	
	//Behaviour:
	//	'Behavior:' name=ID
	//	'priority:' prio=INT
	//	'devices:' deviceList+=Device+
	//	'actions:' actionList+=Action+
	//	'trigger:' triggerList=Trigger;
	public BehaviourElements getBehaviourAccess() {
		return pBehaviour;
	}
	
	public ParserRule getBehaviourRule() {
		return getBehaviourAccess().getRule();
	}
	
	//Action:
	//	Movement | Sound | IO;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Movement:
	//	MoveForward | MoveBackward | Turn | Stop;
	public MovementElements getMovementAccess() {
		return pMovement;
	}
	
	public ParserRule getMovementRule() {
		return getMovementAccess().getRule();
	}
	
	//MoveForward:
	//	'ForwardSpeed:' fspeed=INT;
	public MoveForwardElements getMoveForwardAccess() {
		return pMoveForward;
	}
	
	public ParserRule getMoveForwardRule() {
		return getMoveForwardAccess().getRule();
	}
	
	//MoveBackward:
	//	'BackwardSpeed:' bspeed=INT;
	public MoveBackwardElements getMoveBackwardAccess() {
		return pMoveBackward;
	}
	
	public ParserRule getMoveBackwardRule() {
		return getMoveBackwardAccess().getRule();
	}
	
	//Turn:
	//	'TurnAngle:' angle=INT;
	public TurnElements getTurnAccess() {
		return pTurn;
	}
	
	public ParserRule getTurnRule() {
		return getTurnAccess().getRule();
	}
	
	//Stop:
	//	'WaitFor:' duration=INT;
	public StopElements getStopAccess() {
		return pStop;
	}
	
	public ParserRule getStopRule() {
		return getStopAccess().getRule();
	}
	
	//Sound:
	//	'PlaySound:' soundName=STRING;
	public SoundElements getSoundAccess() {
		return pSound;
	}
	
	public ParserRule getSoundRule() {
		return getSoundAccess().getRule();
	}
	
	//IO:
	//	'PrintMessage' message=STRING;
	public IOElements getIOAccess() {
		return pIO;
	}
	
	public ParserRule getIORule() {
		return getIOAccess().getRule();
	}
	
	//Trigger:
	//	'Condition' condition=STRING;
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//Device:
	//	'Device:' type=STRING;
	public DeviceElements getDeviceAccess() {
		return pDevice;
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
