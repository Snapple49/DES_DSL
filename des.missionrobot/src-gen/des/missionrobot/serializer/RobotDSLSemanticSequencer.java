/*
 * generated by Xtext 2.10.0
 */
package des.missionrobot.serializer;

import com.google.inject.Inject;
import des.missionrobot.robotDSL.Flag;
import des.missionrobot.robotDSL.Mission;
import des.missionrobot.robotDSL.MissionList;
import des.missionrobot.robotDSL.RobotDSLPackage;
import des.missionrobot.robotDSL.Task;
import des.missionrobot.robotDSL.Time;
import des.missionrobot.robotDSL.Trigger;
import des.missionrobot.services.RobotDSLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class RobotDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RobotDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RobotDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RobotDSLPackage.ACTION:
				sequence_Action(context, (des.missionrobot.robotDSL.Action) semanticObject); 
				return; 
			case RobotDSLPackage.FLAG:
				sequence_Flag(context, (Flag) semanticObject); 
				return; 
			case RobotDSLPackage.MISSION:
				sequence_Mission(context, (Mission) semanticObject); 
				return; 
			case RobotDSLPackage.MISSION_LIST:
				sequence_MissionList(context, (MissionList) semanticObject); 
				return; 
			case RobotDSLPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			case RobotDSLPackage.TIME:
				sequence_Time(context, (Time) semanticObject); 
				return; 
			case RobotDSLPackage.TRIGGER:
				sequence_Trigger(context, (Trigger) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     ((dir=Direction duration=INT? speed=Speed?) | (dir=Direction degr=INT) | op=ArmOp | sound=Sound | (flag=[Flag|ID] bool=Bool))
	 */
	protected void sequence_Action(ISerializationContext context, des.missionrobot.robotDSL.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns Flag
	 *
	 * Constraint:
	 *     (name=ID bool=Bool?)
	 */
	protected void sequence_Flag(ISerializationContext context, Flag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MissionList returns MissionList
	 *
	 * Constraint:
	 *     missionList+=Mission+
	 */
	protected void sequence_MissionList(ISerializationContext context, MissionList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mission returns Mission
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         flagsList+=Flag* 
	 *         behaviorList+=Task+ 
	 *         goalEvents+=Trigger* 
	 *         timeout=Time? 
	 *         finishActions+=Action*
	 *     )
	 */
	protected void sequence_Mission(ISerializationContext context, Mission semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (name=ID prio=INT triggerList+=Trigger* actionList+=Action+)
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Time returns Time
	 *
	 * Constraint:
	 *     sec=INT
	 */
	protected void sequence_Time(ISerializationContext context, Time semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RobotDSLPackage.Literals.TIME__SEC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RobotDSLPackage.Literals.TIME__SEC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeAccess().getSecINTTerminalRuleCall_1_0(), semanticObject.getSec());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Trigger returns Trigger
	 *
	 * Constraint:
	 *     (boolType=Bool? ((neg=Negation? flag=[Flag|ID]) | (sensor=Sensor (color=Color | (bool=Bool distance=INT)))))
	 */
	protected void sequence_Trigger(ISerializationContext context, Trigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
