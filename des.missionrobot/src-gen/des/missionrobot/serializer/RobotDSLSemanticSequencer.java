/*
 * generated by Xtext 2.10.0
 */
package des.missionrobot.serializer;

import com.google.inject.Inject;
import des.missionrobot.robotDSL.Behavior;
import des.missionrobot.robotDSL.Event;
import des.missionrobot.robotDSL.Mission;
import des.missionrobot.robotDSL.MissionList;
import des.missionrobot.robotDSL.Reaction;
import des.missionrobot.robotDSL.RobotDSLPackage;
import des.missionrobot.robotDSL.Trigger;
import des.missionrobot.services.RobotDSLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class RobotDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RobotDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RobotDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RobotDSLPackage.ACTION:
				sequence_Action(context, (des.missionrobot.robotDSL.Action) semanticObject); 
				return; 
			case RobotDSLPackage.BEHAVIOR:
				sequence_Behavior(context, (Behavior) semanticObject); 
				return; 
			case RobotDSLPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case RobotDSLPackage.MISSION:
				sequence_Mission(context, (Mission) semanticObject); 
				return; 
			case RobotDSLPackage.MISSION_LIST:
				sequence_MissionList(context, (MissionList) semanticObject); 
				return; 
			case RobotDSLPackage.REACTION:
				sequence_Reaction(context, (Reaction) semanticObject); 
				return; 
			case RobotDSLPackage.TRIGGER:
				sequence_Trigger(context, (Trigger) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     ((dir=Direction duration=INT? speed=Speed?) | (dir=Direction degr=INT) | op=ArmOp | sound=Sound)
	 */
	protected void sequence_Action(ISerializationContext context, des.missionrobot.robotDSL.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Behavior returns Behavior
	 *
	 * Constraint:
	 *     (name=ID prio=INT (triggerList+=Trigger+ reactionList+=Reaction*)? actionList+=Action*)
	 */
	protected void sequence_Behavior(ISerializationContext context, Behavior semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     ((name=ID repeat=Repeat?) | time=INT)
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MissionList returns MissionList
	 *
	 * Constraint:
	 *     missionList+=Mission+
	 */
	protected void sequence_MissionList(ISerializationContext context, MissionList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mission returns Mission
	 *
	 * Constraint:
	 *     (name=ID behaviorList+=Behavior+ goalEvents+=[Event|ID])
	 */
	protected void sequence_Mission(ISerializationContext context, Mission semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Reaction returns Reaction
	 *
	 * Constraint:
	 *     (event=[Event|ID] reactions+=Action+)
	 */
	protected void sequence_Reaction(ISerializationContext context, Reaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Trigger returns Trigger
	 *
	 * Constraint:
	 *     (boolType=Bool? event=[Event|ID]? sensor=Sensor (color=Color | (bool=Bool distance=INT)))
	 */
	protected void sequence_Trigger(ISerializationContext context, Trigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
