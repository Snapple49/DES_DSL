/*
 * generated by Xtext 2.10.0
 */
grammar InternalRobotDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package des.missionrobot.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package des.missionrobot.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import des.missionrobot.services.RobotDSLGrammarAccess;

}

@parser::members {

 	private RobotDSLGrammarAccess grammarAccess;

    public InternalRobotDSLParser(TokenStream input, RobotDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MissionList";
   	}

   	@Override
   	protected RobotDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMissionList
entryRuleMissionList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMissionListRule()); }
	iv_ruleMissionList=ruleMissionList
	{ $current=$iv_ruleMissionList.current; }
	EOF;

// Rule MissionList
ruleMissionList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMissionListAccess().getMissionListMissionParserRuleCall_0());
			}
			lv_missionList_0_0=ruleMission
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getMissionListRule());
				}
				add(
					$current,
					"missionList",
					lv_missionList_0_0,
					"des.missionrobot.RobotDSL.Mission");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleMission
entryRuleMission returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMissionRule()); }
	iv_ruleMission=ruleMission
	{ $current=$iv_ruleMission.current; }
	EOF;

// Rule Mission
ruleMission returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Mission'
		{
			newLeafNode(otherlv_0, grammarAccess.getMissionAccess().getMissionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMissionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMissionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='Behaviors:'
		{
			newLeafNode(otherlv_2, grammarAccess.getMissionAccess().getBehaviorsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMissionAccess().getBehaviorListBehaviorParserRuleCall_3_0());
				}
				lv_behaviorList_3_0=ruleBehavior
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMissionRule());
					}
					add(
						$current,
						"behaviorList",
						lv_behaviorList_3_0,
						"des.missionrobot.RobotDSL.Behavior");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='Goal:'
		{
			newLeafNode(otherlv_4, grammarAccess.getMissionAccess().getGoalKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMissionRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getMissionAccess().getGoalEventsEventCrossReference_5_0());
				}
			)
		)
	)
;

// Entry rule entryRuleBehavior
entryRuleBehavior returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBehaviorRule()); }
	iv_ruleBehavior=ruleBehavior
	{ $current=$iv_ruleBehavior.current; }
	EOF;

// Rule Behavior
ruleBehavior returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Behavior:'
		{
			newLeafNode(otherlv_0, grammarAccess.getBehaviorAccess().getBehaviorKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getBehaviorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBehaviorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='priority:'
		{
			newLeafNode(otherlv_2, grammarAccess.getBehaviorAccess().getPriorityKeyword_2());
		}
		(
			(
				lv_prio_3_0=RULE_INT
				{
					newLeafNode(lv_prio_3_0, grammarAccess.getBehaviorAccess().getPrioINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBehaviorRule());
					}
					setWithLastConsumed(
						$current,
						"prio",
						lv_prio_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				otherlv_4='Triggers:'
				{
					newLeafNode(otherlv_4, grammarAccess.getBehaviorAccess().getTriggersKeyword_4_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBehaviorAccess().getTriggerListTriggerParserRuleCall_4_0_1_0());
						}
						lv_triggerList_5_0=ruleTrigger
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBehaviorRule());
							}
							add(
								$current,
								"triggerList",
								lv_triggerList_5_0,
								"des.missionrobot.RobotDSL.Trigger");
							afterParserOrEnumRuleCall();
						}
					)
				)+
			)
			(
				otherlv_6='Reactions:'
				{
					newLeafNode(otherlv_6, grammarAccess.getBehaviorAccess().getReactionsKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBehaviorAccess().getReactionListReactionParserRuleCall_4_1_1_0());
						}
						lv_reactionList_7_0=ruleReaction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBehaviorRule());
							}
							add(
								$current,
								"reactionList",
								lv_reactionList_7_0,
								"des.missionrobot.RobotDSL.Reaction");
							afterParserOrEnumRuleCall();
						}
					)
				)+
			)?
		)?
		(
			otherlv_8='Actions:'
			{
				newLeafNode(otherlv_8, grammarAccess.getBehaviorAccess().getActionsKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBehaviorAccess().getActionListActionParserRuleCall_5_1_0());
					}
					lv_actionList_9_0=ruleAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBehaviorRule());
						}
						add(
							$current,
							"actionList",
							lv_actionList_9_0,
							"des.missionrobot.RobotDSL.Action");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Move'
			{
				newLeafNode(otherlv_0, grammarAccess.getActionAccess().getMoveKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionAccess().getDirDirectionEnumRuleCall_0_1_0());
					}
					lv_dir_1_0=ruleDirection
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionRule());
						}
						set(
							$current,
							"dir",
							lv_dir_1_0,
							"des.missionrobot.RobotDSL.Direction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2='for'
				{
					newLeafNode(otherlv_2, grammarAccess.getActionAccess().getForKeyword_0_2_0());
				}
				(
					(
						lv_duration_3_0=RULE_INT
						{
							newLeafNode(lv_duration_3_0, grammarAccess.getActionAccess().getDurationINTTerminalRuleCall_0_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getActionRule());
							}
							setWithLastConsumed(
								$current,
								"duration",
								lv_duration_3_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
				otherlv_4='sec'
				{
					newLeafNode(otherlv_4, grammarAccess.getActionAccess().getSecKeyword_0_2_2());
				}
			)?
			(
				otherlv_5='at'
				{
					newLeafNode(otherlv_5, grammarAccess.getActionAccess().getAtKeyword_0_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getActionAccess().getSpeedSpeedEnumRuleCall_0_3_1_0());
						}
						lv_speed_6_0=ruleSpeed
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getActionRule());
							}
							set(
								$current,
								"speed",
								lv_speed_6_0,
								"des.missionrobot.RobotDSL.Speed");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_7='speed'
				{
					newLeafNode(otherlv_7, grammarAccess.getActionAccess().getSpeedKeyword_0_3_2());
				}
			)?
		)
		    |
		(
			otherlv_8='Turn'
			{
				newLeafNode(otherlv_8, grammarAccess.getActionAccess().getTurnKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionAccess().getDirDirectionEnumRuleCall_1_1_0());
					}
					lv_dir_9_0=ruleDirection
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionRule());
						}
						set(
							$current,
							"dir",
							lv_dir_9_0,
							"des.missionrobot.RobotDSL.Direction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_degr_10_0=RULE_INT
					{
						newLeafNode(lv_degr_10_0, grammarAccess.getActionAccess().getDegrINTTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActionRule());
						}
						setWithLastConsumed(
							$current,
							"degr",
							lv_degr_10_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_11='deg'
			{
				newLeafNode(otherlv_11, grammarAccess.getActionAccess().getDegKeyword_1_3());
			}
		)
		    |
		(
			otherlv_12='Arm'
			{
				newLeafNode(otherlv_12, grammarAccess.getActionAccess().getArmKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionAccess().getOpArmOpEnumRuleCall_2_1_0());
					}
					lv_op_13_0=ruleArmOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionRule());
						}
						set(
							$current,
							"op",
							lv_op_13_0,
							"des.missionrobot.RobotDSL.ArmOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_14='Play'
			{
				newLeafNode(otherlv_14, grammarAccess.getActionAccess().getPlayKeyword_3_0());
			}
			otherlv_15='sound'
			{
				newLeafNode(otherlv_15, grammarAccess.getActionAccess().getSoundKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionAccess().getSoundSoundEnumRuleCall_3_2_0());
					}
					lv_sound_16_0=ruleSound
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionRule());
						}
						set(
							$current,
							"sound",
							lv_sound_16_0,
							"des.missionrobot.RobotDSL.Sound");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleReaction
entryRuleReaction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReactionRule()); }
	iv_ruleReaction=ruleReaction
	{ $current=$iv_ruleReaction.current; }
	EOF;

// Rule Reaction
ruleReaction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getReactionAccess().getIfKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReactionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getReactionAccess().getEventEventCrossReference_1_0());
				}
			)
		)
		otherlv_2='triggered'
		{
			newLeafNode(otherlv_2, grammarAccess.getReactionAccess().getTriggeredKeyword_2());
		}
		otherlv_3='Do:'
		{
			newLeafNode(otherlv_3, grammarAccess.getReactionAccess().getDoKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReactionAccess().getReactionsActionParserRuleCall_4_0());
				}
				lv_reactions_4_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReactionRule());
					}
					add(
						$current,
						"reactions",
						lv_reactions_4_0,
						"des.missionrobot.RobotDSL.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleTrigger
entryRuleTrigger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTriggerRule()); }
	iv_ruleTrigger=ruleTrigger
	{ $current=$iv_ruleTrigger.current; }
	EOF;

// Rule Trigger
ruleTrigger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTriggerAccess().getBoolTypeBoolEnumRuleCall_0_0());
				}
				lv_boolType_0_0=ruleBool
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTriggerRule());
					}
					set(
						$current,
						"boolType",
						lv_boolType_0_0,
						"des.missionrobot.RobotDSL.Bool");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTriggerRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getTriggerAccess().getEventEventCrossReference_1_0());
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTriggerAccess().getSensorSensorEnumRuleCall_2_0());
				}
				lv_sensor_2_0=ruleSensor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTriggerRule());
					}
					set(
						$current,
						"sensor",
						lv_sensor_2_0,
						"des.missionrobot.RobotDSL.Sensor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_3='is'
				{
					newLeafNode(otherlv_3, grammarAccess.getTriggerAccess().getIsKeyword_3_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTriggerAccess().getColorColorEnumRuleCall_3_0_1_0());
						}
						lv_color_4_0=ruleColor
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTriggerRule());
							}
							set(
								$current,
								"color",
								lv_color_4_0,
								"des.missionrobot.RobotDSL.Color");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_5='distance'
				{
					newLeafNode(otherlv_5, grammarAccess.getTriggerAccess().getDistanceKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTriggerAccess().getBoolBoolEnumRuleCall_3_1_1_0());
						}
						lv_bool_6_0=ruleBool
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTriggerRule());
							}
							set(
								$current,
								"bool",
								lv_bool_6_0,
								"des.missionrobot.RobotDSL.Bool");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_7='than'
				{
					newLeafNode(otherlv_7, grammarAccess.getTriggerAccess().getThanKeyword_3_1_2());
				}
				(
					(
						lv_distance_8_0=RULE_INT
						{
							newLeafNode(lv_distance_8_0, grammarAccess.getTriggerAccess().getDistanceINTTerminalRuleCall_3_1_3_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTriggerRule());
							}
							setWithLastConsumed(
								$current,
								"distance",
								lv_distance_8_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
				otherlv_9='cm'
				{
					newLeafNode(otherlv_9, grammarAccess.getTriggerAccess().getCmKeyword_3_1_4());
				}
			)
		)
	)
;

// Rule Direction
ruleDirection returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='forward'
			{
				$current = grammarAccess.getDirectionAccess().getFORWARDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDirectionAccess().getFORWARDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='backward'
			{
				$current = grammarAccess.getDirectionAccess().getBACKWARDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDirectionAccess().getBACKWARDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='left'
			{
				$current = grammarAccess.getDirectionAccess().getLEFTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDirectionAccess().getLEFTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='right'
			{
				$current = grammarAccess.getDirectionAccess().getRIGHTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getDirectionAccess().getRIGHTEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule Speed
ruleSpeed returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='high'
			{
				$current = grammarAccess.getSpeedAccess().getHIGHEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSpeedAccess().getHIGHEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='medium'
			{
				$current = grammarAccess.getSpeedAccess().getMEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSpeedAccess().getMEDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='low'
			{
				$current = grammarAccess.getSpeedAccess().getLOWEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getSpeedAccess().getLOWEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule ArmOp
ruleArmOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='raise'
			{
				$current = grammarAccess.getArmOpAccess().getUPEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getArmOpAccess().getUPEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='lower'
			{
				$current = grammarAccess.getArmOpAccess().getDOWNEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getArmOpAccess().getDOWNEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Sound
ruleSound returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='buzz'
			{
				$current = grammarAccess.getSoundAccess().getBuzzEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSoundAccess().getBuzzEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='fanfare'
			{
				$current = grammarAccess.getSoundAccess().getFanfareEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSoundAccess().getFanfareEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Sensor
ruleSensor returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Color'
			{
				$current = grammarAccess.getSensorAccess().getCOLOREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSensorAccess().getCOLOREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='LeftLight'
			{
				$current = grammarAccess.getSensorAccess().getLEFTLIGHTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSensorAccess().getLEFTLIGHTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='RightLight'
			{
				$current = grammarAccess.getSensorAccess().getRIGHTLIGHTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getSensorAccess().getRIGHTLIGHTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='RearHeight'
			{
				$current = grammarAccess.getSensorAccess().getBACKUSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getSensorAccess().getBACKUSEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='FrontDistance'
			{
				$current = grammarAccess.getSensorAccess().getFRONTUSEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getSensorAccess().getFRONTUSEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule Color
ruleColor returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='red'
			{
				$current = grammarAccess.getColorAccess().getREDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getColorAccess().getREDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='white'
			{
				$current = grammarAccess.getColorAccess().getWHITEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getColorAccess().getWHITEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Bool
ruleBool returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='less'
			{
				$current = grammarAccess.getBoolAccess().getLEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBoolAccess().getLEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='greater'
			{
				$current = grammarAccess.getBoolAccess().getGEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBoolAccess().getGEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='and'
			{
				$current = grammarAccess.getBoolAccess().getANDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBoolAccess().getANDEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='or'
			{
				$current = grammarAccess.getBoolAccess().getOREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getBoolAccess().getOREnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule Repeat
ruleRepeat returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='once'
			{
				$current = grammarAccess.getRepeatAccess().getONCEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRepeatAccess().getONCEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='repeatable'
			{
				$current = grammarAccess.getRepeatAccess().getREPEATEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRepeatAccess().getREPEATEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
